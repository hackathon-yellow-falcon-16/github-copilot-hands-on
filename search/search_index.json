{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GitHub Copilot Workshop! \ud83d\ude80","text":"<p>Welcome to our comprehensive GitHub Copilot workshop! This interactive guide will help you explore the powerful capabilities of GitHub Copilot and learn how to leverage AI-assisted coding to enhance your development workflow.</p>"},{"location":"#what-is-github-copilot","title":"What is GitHub Copilot? \u2728","text":"<p>GitHub Copilot is an AI pair programmer that helps you write better code faster. It draws context from comments and code to suggest individual lines and whole functions instantly. GitHub Copilot is powered by OpenAI's Codex, a generative pretrained language model that has been trained on a vast corpus of text and code.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn \ud83d\udcda","text":"<p>Throughout this workshop, you'll:</p> <ul> <li>Understand how GitHub Copilot works and its capabilities</li> <li>Learn best practices for working with AI-assisted coding</li> <li>Explore various programming languages and scenarios</li> <li>Complete hands-on exercises to reinforce your learning</li> <li>Discover tips and tricks to maximize your productivity</li> </ul>"},{"location":"#workshop-structure","title":"Workshop Structure \ud83d\uddc2\ufe0f","text":"<p>This workshop is designed to be flexible and can be completed in either a 2-hour or 4-hour format. The content is organized into:</p> <ol> <li>Introduction and Setup: Get familiar with GitHub Copilot and ensure your environment is properly configured</li> <li>Hands-on Labs: Practice using GitHub Copilot with various programming languages and scenarios</li> <li>Advanced Topics: Explore more complex use cases and techniques</li> </ol>"},{"location":"#getting-started","title":"Getting Started \ud83c\udfc1","text":"<p>To make the most of this workshop:</p> <ol> <li>Ensure you have a GitHub account with GitHub Copilot access</li> <li>Have a compatible code editor installed (VS Code recommended)</li> <li>Follow the hands-on labs in sequence for the best learning experience</li> </ol> <p>Ready to supercharge your coding with AI? Let's dive in! \ud83c\udfca\u200d\u2642\ufe0f</p> <p></p>"},{"location":"future-roadmap/","title":"Future Roadmap of GitHub Copilot \ud83d\ude80","text":"<p>GitHub Copilot is continuously evolving, with new features and capabilities being added regularly. This chapter explores the exciting future roadmap of GitHub Copilot and what developers can expect in the coming months and years.</p>"},{"location":"future-roadmap/#current-state-of-github-copilot","title":"Current State of GitHub Copilot \ud83d\udcca","text":"<p>Before diving into the future, let's briefly recap where GitHub Copilot stands today:</p> <ul> <li>Code Completion: Suggests code as you type, completing lines or entire functions</li> <li>Natural Language Understanding: Converts comments into functional code</li> <li>Multi-Language Support: Works across numerous programming languages</li> <li>IDE Integration: Available in popular editors like VS Code, Visual Studio, JetBrains IDEs, and more</li> <li>GitHub Copilot Chat: Provides conversational AI assistance for coding questions</li> <li>Context Awareness: Understands your project's context to provide relevant suggestions</li> </ul>"},{"location":"future-roadmap/#near-term-roadmap-6-12-months","title":"Near-Term Roadmap (6-12 Months) \ud83d\udd2e","text":""},{"location":"future-roadmap/#enhanced-context-understanding","title":"Enhanced Context Understanding \ud83e\udde0","text":"<ul> <li>Improved Repository-Wide Context: Better understanding of your entire codebase, not just the current file</li> <li>Semantic Code Analysis: Deeper understanding of code meaning and intent</li> <li>Cross-File Refactoring: Suggest changes across multiple files to improve code quality</li> </ul>"},{"location":"future-roadmap/#advanced-collaboration-features","title":"Advanced Collaboration Features \ud83d\udc65","text":"<ul> <li>Team-Based Learning: Copilot will learn from your team's coding patterns and preferences</li> <li>Code Review Assistance: Automated suggestions for code reviews</li> <li>Collaborative Coding: Real-time AI assistance during pair programming sessions</li> </ul>"},{"location":"future-roadmap/#expanded-language-and-framework-support","title":"Expanded Language and Framework Support \ud83c\udf10","text":"<ul> <li>Specialized Framework Knowledge: Deeper understanding of popular frameworks</li> <li>Domain-Specific Suggestions: Tailored recommendations for specific industries or domains</li> <li>New Language Support: Expanding to cover more programming languages and technologies</li> </ul>"},{"location":"future-roadmap/#medium-term-roadmap-1-2-years","title":"Medium-Term Roadmap (1-2 Years) \ud83c\udf31","text":""},{"location":"future-roadmap/#ai-driven-architecture-assistance","title":"AI-Driven Architecture Assistance \ud83c\udfd7\ufe0f","text":"<ul> <li>System Design Suggestions: Help with designing software architecture</li> <li>Pattern Recognition: Identify and suggest architectural patterns</li> <li>Performance Optimization: Recommendations for improving code efficiency</li> </ul>"},{"location":"future-roadmap/#advanced-testing-capabilities","title":"Advanced Testing Capabilities \ud83e\uddea","text":"<ul> <li>Test Generation: Automatically generate comprehensive test suites</li> <li>Edge Case Detection: Identify potential edge cases in your code</li> <li>Test Coverage Analysis: Suggest tests to improve coverage</li> </ul>"},{"location":"future-roadmap/#security-and-compliance","title":"Security and Compliance \ud83d\udd12","text":"<ul> <li>Security Vulnerability Detection: Identify potential security issues in real-time</li> <li>Compliance Checking: Ensure code meets industry standards and regulations</li> <li>Best Practice Enforcement: Suggestions to align with security best practices</li> </ul>"},{"location":"future-roadmap/#long-term-vision-2-years","title":"Long-Term Vision (2+ Years) \ud83d\udd2d","text":""},{"location":"future-roadmap/#autonomous-code-generation","title":"Autonomous Code Generation \ud83e\udd16","text":"<ul> <li>Full Feature Implementation: Generate entire features from high-level descriptions</li> <li>Self-Improving Code: Suggestions that evolve based on runtime performance</li> <li>Autonomous Debugging: Identify and fix bugs with minimal human intervention</li> </ul>"},{"location":"future-roadmap/#natural-language-programming","title":"Natural Language Programming \ud83d\udcac","text":"<ul> <li>Conversational Development: Build software through natural conversations</li> <li>Requirements to Code: Transform business requirements directly into working code</li> <li>Documentation Generation: Create comprehensive documentation from code</li> </ul>"},{"location":"future-roadmap/#cross-platform-intelligence","title":"Cross-Platform Intelligence \ud83d\udcf1","text":"<ul> <li>Multi-Platform Optimization: Suggestions optimized for various platforms and devices</li> <li>Adaptive UI Generation: Create user interfaces that adapt to different devices</li> <li>Cross-Platform Testing: Ensure code works consistently across platforms</li> </ul>"},{"location":"future-roadmap/#ethical-considerations-and-challenges","title":"Ethical Considerations and Challenges \ud83e\udd14","text":"<p>As GitHub Copilot evolves, several important considerations will shape its development:</p>"},{"location":"future-roadmap/#ethical-ai-development","title":"Ethical AI Development \ud83c\udf1f","text":"<ul> <li>Bias Mitigation: Ongoing efforts to reduce bias in code suggestions</li> <li>Transparency: Clear communication about how suggestions are generated</li> <li>User Control: Ensuring developers maintain control over their code</li> </ul>"},{"location":"future-roadmap/#technical-challenges","title":"Technical Challenges \ud83e\udde9","text":"<ul> <li>Computational Efficiency: Balancing suggestion quality with performance</li> <li>Context Window Limitations: Expanding the amount of code Copilot can consider</li> <li>Integration Complexity: Seamless integration with diverse development environments</li> </ul>"},{"location":"future-roadmap/#industry-impact","title":"Industry Impact \ud83c\udf0d","text":"<ul> <li>Developer Productivity: Measuring and maximizing productivity gains</li> <li>Skill Development: Ensuring Copilot enhances rather than replaces developer skills</li> <li>Economic Effects: Understanding the broader impact on the software industry</li> </ul>"},{"location":"future-roadmap/#how-to-stay-updated","title":"How to Stay Updated \ud83d\udce1","text":"<p>To keep up with GitHub Copilot's evolving capabilities:</p> <ol> <li>GitHub Blog: Follow the GitHub Blog for official announcements</li> <li>Release Notes: Check Copilot's release notes in your IDE</li> <li>GitHub Changelog: Review the GitHub Changelog for updates</li> <li>GitHub Next: Explore GitHub Next for experimental features</li> <li>Community Forums: Participate in GitHub Copilot discussions</li> </ol>"},{"location":"future-roadmap/#preparing-for-the-future","title":"Preparing for the Future \ud83c\udf08","text":"<p>As GitHub Copilot continues to evolve, developers can prepare by:</p> <ul> <li>Embracing AI Collaboration: View AI as a collaborative partner rather than a replacement</li> <li>Focusing on High-Level Skills: Develop skills in architecture, design, and problem-solving</li> <li>Providing Quality Feedback: Help improve Copilot by providing feedback on suggestions</li> <li>Staying Adaptable: Be ready to incorporate new AI capabilities into your workflow</li> <li>Ethical Consideration: Think critically about how and when to use AI-generated code</li> </ul> <p>The future of GitHub Copilot promises to transform how we write code, making development more accessible, efficient, and creative. By understanding the roadmap and preparing for these changes, developers can make the most of this powerful AI assistant! \ud83d\ude80</p>"},{"location":"model-comparison/","title":"AI Model Comparison for GitHub Copilot \ud83e\udde0","text":"<p>This guide provides a comparison of different AI models that power GitHub Copilot, helping you understand their capabilities, strengths, and limitations.</p> <p>Up to date model comparison from GitHub</p> <p>Check the model comparison from GitHub for more up to date information</p>"},{"location":"model-comparison/#model-comparison-table","title":"Model Comparison Table \ud83d\udcca","text":"Model Best Use Cases Context Window Response Speed Accuracy &amp; Reasoning Key Strengths Limitations GPT-3.5 Turbo - Quick code suggestions- Simple completions- Routine tasks ~16k tokens Very fast Good for common patterns and standard code - Extremely responsive- Low latency- Efficient for routine coding - Less nuanced understanding- May struggle with complex logic- Limited context window GPT-4o - Complex coding tasks- Debugging- Architecture suggestions ~128k tokens Moderate High accuracy across languages and frameworks - Balanced speed/quality- Strong reasoning- Good at explaining code - Higher resource usage- Occasional over-generation- May be slower than GPT-3.5 OpenAI O1 - Deep problem-solving- Advanced debugging- Complex algorithms ~128k tokens Slower Exceptional in solving highly intricate logicCan reason step by step in a \"thinking\" mode - Extremely thorough- Great for advanced debugging- Chain-of-thought for tough problems - High latency- Often limited usage quotas- May \"over-explain\" or produce verbose solutions OpenAI O3-mini - Coding-focused tasks- Ideal for typical dev workflows ~200k tokens (input) Almost as fast as GPT-3.5(optimized for code) Very high accuracy in coding benchmarks, surpassing O1 for standard tasks - Purpose-built for generating &amp; refining code- Balances speed + quality- Large context window - Possibly less \"general knowledge\" than GPT-4- High-resource usage if extremely large context is provided Anthropic Claude 3.5 - General coding- Large codebase comprehension- Quick Q&amp;A ~100k\u2013200k tokens Fast in most scenarios(significantly faster than O1) Very accurate on tasks like function implementation &amp; debuggingScores very high on coding benchmarks - Often provides well-structured, production-ready code- Strong large-context handling- Good explanations - Might need targeted prompts for extremely specialized frameworks- Tends to produce longer textual responses Anthropic Claude 3.7 - Similar to 3.5 but more refined- Optional \"Thinking Mode\" ~100k\u2013200k tokens Generally fast(slightly slower in \"Thinking Mode\") On par with or better than Claude 3.5 in correctnessGood for iterative improvements &amp; multi-step tasks - Supports agent-like advanced reasoning- Can handle in-depth queries- Large context window - Variations in output style if \"Thinking Mode\" is enabled- Still slower than GPT-3.5 for trivial tasks Google Gemini 2.0 \"Flash\" - Enterprise-scale dev tasks- Massive codebases- Refactoring, performance tuning Up to ~1M tokens Optimized for low latency(can handle huge contexts with minimal slowdown) Highly promising accuracy (on par with GPT-4) \u2013 excels in code, math, &amp; logic(official benchmarks pending release) - Enormous context window for entire projects- Good synergy with Google ecosystem- Strong code optimization - Actual performance metrics still emerging- Potentially high resource overhead for extremely large prompts"},{"location":"model-comparison/#quick-tips-on-model-selection","title":"Quick Tips on Model Selection \ud83d\udca1","text":"<ol> <li> <p>Everyday Speed &amp; Simplicity? \ud83c\udfce\ufe0f    Stick to GPT-3.5 Turbo or O3-mini for near real-time code suggestions on routine tasks.</p> </li> <li> <p>Balanced Performance for Complex Needs? \u2696\ufe0f GPT-4o or Claude 3.5/3.7 offer a strong combination of high accuracy, large context, and reasonable speed.</p> </li> <li> <p>Deep Problem-Solving &amp; Debugging? \ud83d\udd0d OpenAI O1 (or O3-mini for coding-specific tasks) can handle intricate logic and step-by-step reasoning. Just be prepared for higher latency or usage limits.</p> </li> <li> <p>Massive Contexts or Enterprise Projects? \ud83c\udfe2 Claude 3.5/3.7 and Google Gemini both feature enormous context windows (100k+ tokens), with Gemini Flash supporting up to 1M tokens.</p> </li> <li> <p>Model Switching \ud83d\udd04  </p> </li> <li>It is often beneficial to switch models for specialized tasks (e.g., from GPT-4o to O1 for advanced debugging).  </li> <li>Be aware of usage limits (especially for O1/O3-mini).  </li> <li>Complex tasks may be slower on thorough models; use faster ones for routine completions.</li> </ol>"},{"location":"model-comparison/#references","title":"References \ud83d\udcda","text":"<p>Below are some official product pages and announcements, which you can consult for more details and the latest updates:</p> <ol> <li> <p>GitHub Copilot </p> <ul> <li>Documentation: https://docs.github.com/en/copilot </li> <li>Blog (Updates &amp; Announcements): https://github.blog/</li> <li>Model Comparison from GitHub: https://docs.github.com/en/copilot/using-github-copilot/ai-models/choosing-the-right-ai-model-for-your-task</li> </ul> </li> <li> <p>OpenAI </p> <ul> <li>GPT-3.5 &amp; GPT-4: https://openai.com/blog/ </li> <li>Model Cards &amp; Docs: https://platform.openai.com/docs/models</li> </ul> </li> <li> <p>Anthropic Claude </p> <ul> <li>Official Site: https://www.anthropic.com/index/introducing-claude </li> <li>Release Announcements: https://www.anthropic.com/index/blog</li> </ul> </li> <li> <p>Google Gemini </p> <ul> <li>Google Cloud AI Blog: https://cloud.google.com/blog/products/ai-machine-learning </li> <li>News &amp; Releases: https://developers.googleblog.com/</li> </ul> </li> </ol> <p>Disclaimer: The content here is for informational purposes only and based on available documentation and reports as of early 2025. Actual performance, quota limits, and feature sets may evolve over time. Check the model comparison from GitHub for more up to date information.</p>"},{"location":"rag-extension-lab/","title":"Building a RAG Extension for GitHub Copilot Chat \ud83e\udd16\ud83d\udcac","text":"<p>This hands-on lab will guide you through building a Retrieval-Augmented Generation (RAG) extension for GitHub Copilot Chat. This extension will enhance Copilot's capabilities by allowing it to access and leverage your own documentation or knowledge base.</p>"},{"location":"rag-extension-lab/#lab-overview","title":"Lab Overview \ud83d\udccb","text":"<p>Duration: 1-2 hours Difficulty: Advanced Prerequisites:  - Familiarity with GitHub Copilot - Basic understanding of RAG systems - Experience with JavaScript/TypeScript - VS Code installed with GitHub Copilot extension</p>"},{"location":"rag-extension-lab/#what-is-rag","title":"What is RAG? \ud83e\udde9","text":"<p>Retrieval-Augmented Generation (RAG) is an AI framework that enhances large language models by: 1. Retrieving relevant information from external knowledge sources 2. Augmenting the model's prompts with this retrieved information 3. Generating more accurate, up-to-date, and contextually relevant responses</p> <p>This approach helps overcome limitations of pre-trained models by providing them with current, domain-specific information.</p>"},{"location":"rag-extension-lab/#why-build-a-rag-extension-for-github-copilot","title":"Why Build a RAG Extension for GitHub Copilot? \ud83c\udfaf","text":"<p>GitHub Copilot is incredibly powerful, but it has some limitations: - It may not have knowledge of your specific codebase or documentation - Its training data has a cutoff date, so it lacks information about newer technologies - It doesn't have direct access to your organization's best practices or internal libraries</p> <p>By building a RAG extension, you can: - Connect Copilot to your own documentation - Provide context-specific suggestions based on your codebase - Ensure recommendations follow your organization's coding standards - Improve the relevance and accuracy of Copilot's suggestions</p>"},{"location":"rag-extension-lab/#what-youll-build","title":"What You'll Build \ud83c\udfd7\ufe0f","text":"<p>In this lab, you'll create a VS Code extension that: 1. Indexes your project documentation or specified knowledge base 2. Creates embeddings for efficient semantic search 3. Intercepts GitHub Copilot Chat queries 4. Retrieves relevant information from your knowledge base 5. Augments Copilot's responses with this information</p>"},{"location":"rag-extension-lab/#getting-started","title":"Getting Started \ud83d\ude80","text":""},{"location":"rag-extension-lab/#step-1-set-up-your-development-environment","title":"Step 1: Set Up Your Development Environment","text":"<p>First, you'll need to set up your development environment for creating VS Code extensions:</p> <pre><code># Install Yeoman and VS Code Extension Generator\nnpm install -g yo generator-code\n\n# Create a new extension project\nyo code\n\n# Select 'New Extension (TypeScript)'\n# Fill in the required information\n</code></pre>"},{"location":"rag-extension-lab/#step-2-install-required-dependencies","title":"Step 2: Install Required Dependencies","text":"<p>Add the necessary dependencies for building the RAG extension:</p> <pre><code># Navigate to your extension directory\ncd your-extension-name\n\n# Install dependencies\nnpm install @vscode/vscode-languagedetection\nnpm install langchain\nnpm install openai\n</code></pre>"},{"location":"rag-extension-lab/#step-3-create-the-extension-structure","title":"Step 3: Create the Extension Structure","text":"<p>Your extension will need several key components:</p> <ol> <li>Document Loader: To read and process your documentation</li> <li>Text Splitter: To break documents into manageable chunks</li> <li>Embedding Generator: To create vector representations of text</li> <li>Vector Store: To store and query embeddings</li> <li>Retriever: To find relevant information based on queries</li> <li>Copilot Interceptor: To augment Copilot's responses</li> </ol>"},{"location":"rag-extension-lab/#step-4-implement-the-rag-pipeline","title":"Step 4: Implement the RAG Pipeline","text":"<p>The detailed implementation will be covered in the workshop, but here's a high-level overview:</p> <pre><code>// Sample code structure (to be implemented during the workshop)\nimport * as vscode from 'vscode';\nimport { Document } from 'langchain/document';\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai';\nimport { RecursiveCharacterTextSplitter } from 'langchain/text_splitter';\nimport { MemoryVectorStore } from 'langchain/vectorstores/memory';\n\n// Document loading and processing\nasync function loadDocuments(paths: string[]): Promise&lt;Document[]&gt; {\n  // Implementation to be added during workshop\n}\n\n// Create embeddings and vector store\nasync function createVectorStore(documents: Document[]): Promise&lt;MemoryVectorStore&gt; {\n  // Implementation to be added during workshop\n}\n\n// Query the vector store\nasync function queryKnowledgeBase(query: string, vectorStore: MemoryVectorStore): Promise&lt;string&gt; {\n  // Implementation to be added during workshop\n}\n\n// Intercept and augment Copilot Chat\nfunction interceptCopilotChat() {\n  // Implementation to be added during workshop\n}\n</code></pre>"},{"location":"rag-extension-lab/#step-5-test-your-extension","title":"Step 5: Test Your Extension","text":"<p>You'll learn how to test your extension with:</p> <ul> <li>Sample documentation</li> <li>Various query types</li> <li>Different retrieval strategies</li> </ul>"},{"location":"rag-extension-lab/#step-6-package-and-share-your-extension","title":"Step 6: Package and Share Your Extension","text":"<p>Finally, you'll package your extension for distribution:</p> <pre><code># Package the extension\nvscode-dev-tools package\n\n# This creates a .vsix file that can be installed in VS Code\n</code></pre>"},{"location":"rag-extension-lab/#expected-outcomes","title":"Expected Outcomes \ud83c\udf89","text":"<p>By the end of this lab, you'll have:</p> <ul> <li>A working RAG extension for GitHub Copilot Chat</li> <li>The ability to connect Copilot to your own knowledge base</li> <li>A deeper understanding of how RAG systems work</li> <li>Skills to further customize and enhance the extension</li> </ul>"},{"location":"rag-extension-lab/#resources-for-further-learning","title":"Resources for Further Learning \ud83d\udcda","text":"<ul> <li>VS Code Extension API Documentation</li> <li>LangChain Documentation</li> <li>GitHub Copilot Extension API</li> <li>RAG Architecture Patterns</li> </ul>"},{"location":"rag-extension-lab/#coming-soon","title":"Coming Soon! \ud83d\udd1c","text":"<p>This hands-on lab is currently under development and will be available in the next workshop update. Stay tuned for the complete implementation guide!</p> <p>In the meantime, you can prepare by:</p> <ol> <li>Familiarizing yourself with VS Code extension development</li> <li>Learning about vector embeddings and semantic search</li> <li>Exploring the LangChain framework</li> <li>Gathering documentation you'd like to use with your RAG system</li> </ol> <p>We're excited to guide you through building this powerful extension in the upcoming workshop! \ud83d\ude80</p>"},{"location":"train-the-trainer/","title":"Train the Trainer Guide \ud83d\udc68\u200d\ud83c\udfeb","text":"<p>This guide is designed to help trainers deliver an effective GitHub Copilot workshop. It provides a structured approach to ensure all critical topics and hands-on activities are covered within the workshop timeframe.</p>"},{"location":"train-the-trainer/#workshop-checklist","title":"Workshop Checklist \u2705","text":""},{"location":"train-the-trainer/#welcome-introduction-10-min","title":"Welcome &amp; Introduction (10 min) \ud83c\udf89","text":"<ul> <li>Welcome participants</li> <li>Introduce the workshop agenda, objectives, and outcomes</li> <li>Briefly introduce GitHub Copilot and its importance</li> </ul>"},{"location":"train-the-trainer/#overview-of-github-copilot-20-min","title":"Overview of GitHub Copilot (20 min) \ud83e\udd16","text":"<ul> <li>What is GitHub Copilot?</li> <li>How does it work?</li> <li>Benefits and use cases</li> <li>Provide reference to GitHub Copilot Documentation</li> </ul>"},{"location":"train-the-trainer/#setting-up-github-copilot-30-min","title":"Setting Up GitHub Copilot (30 min) \u2699\ufe0f","text":"<ul> <li>Step-by-step installation guide</li> <li>Configuration steps</li> <li>Troubleshooting common issues</li> <li>Live demo of setup</li> <li>Provide reference to GitHub Copilot Setup Guide</li> </ul>"},{"location":"train-the-trainer/#break-10-min","title":"Break (10 min) \u2615","text":""},{"location":"train-the-trainer/#hands-on-session-1-basic-usage-30-min","title":"Hands-on Session 1: Basic Usage (30 min) \ud83d\udcbb","text":"<ul> <li>Practical exercises on basic usage:</li> <li>Code completion</li> <li>Suggestions</li> <li>Basic commands</li> <li>Provide sample code repositories and exercise sheets</li> </ul>"},{"location":"train-the-trainer/#advanced-features-of-github-copilot-20-min","title":"Advanced Features of GitHub Copilot (20 min) \ud83d\ude80","text":"<ul> <li>Context-aware suggestions</li> <li>Multi-language support</li> <li>Integration with other tools</li> <li>Live demo</li> </ul>"},{"location":"train-the-trainer/#break-10-min_1","title":"Break (10 min) \ud83c\udf6a","text":""},{"location":"train-the-trainer/#hands-on-session-2-advanced-usage-60-min","title":"Hands-on Session 2: Advanced Usage (60 min) \ud83d\udd27","text":"<ul> <li>Practical exercises on advanced usage:</li> <li>Refactoring</li> <li>Generating complex code</li> <li>Using Copilot with different languages</li> <li>Provide sample projects and exercise sheets</li> </ul>"},{"location":"train-the-trainer/#best-practices-and-limitations-20-min","title":"Best Practices and Limitations (20 min) \ud83d\udcdd","text":"<ul> <li>Discuss best practices for using GitHub Copilot</li> <li>Understanding its limitations</li> </ul>"},{"location":"train-the-trainer/#break-10-min_2","title":"Break (10 min) \ud83e\uddc3","text":""},{"location":"train-the-trainer/#qa-and-workshop-feedback-30-min","title":"Q&amp;A and Workshop Feedback (30 min) \ud83d\udcac","text":"<ul> <li>Open Q&amp;A session</li> <li>Gather feedback on the workshop</li> <li>Discuss improvements and suggestions</li> </ul>"},{"location":"train-the-trainer/#trainer-tips","title":"Trainer Tips \ud83d\udca1","text":"<ol> <li>Preparation: Familiarize yourself with all hands-on labs before the workshop</li> <li>Timing: Be mindful of time - have a timer visible to keep track</li> <li>Technical Issues: Prepare for common technical issues participants might face</li> <li>Engagement: Encourage questions and participation throughout the session</li> <li>Examples: Have real-world examples ready to demonstrate the value of GitHub Copilot</li> <li>Flexibility: Be prepared to adjust the pace based on the group's progress</li> <li>Follow-up: Provide resources for participants to continue learning after the workshop</li> </ol>"},{"location":"train-the-trainer/#resources-for-trainers","title":"Resources for Trainers \ud83d\udcda","text":"<ul> <li>GitHub Copilot Documentation</li> <li>GitHub Copilot for Business</li> <li>GitHub Copilot Trust Center</li> <li>GitHub Copilot Research Paper</li> </ul> <p>Remember, the goal is not just to teach the technical aspects of GitHub Copilot, but to inspire participants to incorporate AI-assisted coding into their development workflow! \ud83c\udf1f</p>"},{"location":"workshop-overview/","title":"Workshop Overview \ud83d\udd0d","text":"<p>This workshop is designed to provide a comprehensive introduction to GitHub Copilot and its capabilities. Whether you're a beginner or an experienced developer, this workshop will help you understand how to leverage AI-assisted coding to enhance your development workflow.</p>"},{"location":"workshop-overview/#workshop-structure","title":"Workshop Structure \ud83d\udccb","text":"<p>The workshop is flexible and can be conducted in either a 2-hour or 4-hour format, depending on your needs and time constraints. The content is organized to provide a progressive learning experience, starting with the basics and moving on to more advanced topics.</p>"},{"location":"workshop-overview/#workshop-formats","title":"Workshop Formats \u23f1\ufe0f","text":""},{"location":"workshop-overview/#2-hour-workshop","title":"2-Hour Workshop","text":"<p>The 2-hour workshop focuses on:</p> <ul> <li>Introduction to GitHub Copilot</li> <li>Basic setup and configuration</li> <li>Hands-on experience with 1-2 selected labs</li> <li>Key best practices and tips</li> </ul>"},{"location":"workshop-overview/#4-hour-workshop","title":"4-Hour Workshop","text":"<p>The 4-hour workshop includes everything in the 2-hour format, plus:</p> <ul> <li>More in-depth exploration of GitHub Copilot features</li> <li>Additional hands-on labs</li> <li>Advanced usage scenarios</li> <li>Extended Q&amp;A and discussion</li> </ul>"},{"location":"workshop-overview/#hands-on-labs","title":"Hands-On Labs \ud83e\uddea","text":"<p>Our workshop includes a variety of hands-on labs to give you practical experience with GitHub Copilot across different programming languages and scenarios:</p> Name Language Description Length Javascript Calculator HTML/Javascript A small app that serves as a good starter project 20 mins Timer and Selector HTML/CSS/React Building components for workshop trainers 30 mins Polaroid Image Gallery HTML/Javascript Building a small image gallery with animations 45 mins Rock Paper Scissor Python A slightly more advanced app 30 mins Restaurant API + Deployment Python/Azure Creating and deploying a simple API to Azure 45 mins Star Wars API Client Python Creating a library to retrieve Star Wars character data 1 hour Star Wars API Client Java Creating a library to retrieve Star Wars character data 1 hour API Testing with SWAPI C# Implementing tests for an API 30 mins C Sharp Web App C# Working with .NET Web Technologies and unit tests 1 hour Interest Calculator C++ Building an interest calculator with unit tests 30 mins"},{"location":"workshop-overview/#learning-objectives","title":"Learning Objectives \ud83c\udfaf","text":"<p>By the end of this workshop, participants will be able to:</p> <ol> <li>Understand how GitHub Copilot works and its capabilities</li> <li>Configure and use GitHub Copilot effectively in their development environment</li> <li>Apply best practices for working with AI-assisted coding</li> <li>Use GitHub Copilot across different programming languages and scenarios</li> <li>Identify opportunities to improve productivity with AI assistance</li> </ol> <p>Let's embark on this exciting journey to explore the future of coding with GitHub Copilot! \ud83d\ude80</p>"},{"location":"hands-on/","title":"Hands-on Labs Overview \ud83e\uddea","text":"<p>Welcome to the hands-on labs section of our GitHub Copilot workshop! This is where you'll get practical experience using GitHub Copilot across different programming languages and scenarios.</p>"},{"location":"hands-on/#available-labs","title":"Available Labs \ud83d\udccb","text":"<p>Our workshop includes a variety of hands-on labs to give you practical experience with GitHub Copilot:</p> Name Language Description Length Javascript Calculator HTML/Javascript A small app that serves as a good starter project 20 mins Timer and Selector HTML/CSS/React Building components for workshop trainers 30 mins Polaroid Image Gallery HTML/Javascript Building a small image gallery with animations 45 mins Rock Paper Scissor Python A slightly more advanced app 30 mins Restaurant API + Deployment Python/Azure Creating and deploying a simple API to Azure 45 mins Star Wars API Client Python Creating a library to retrieve Star Wars character data 1 hour Star Wars API Client Java Creating a library to retrieve Star Wars character data 1 hour API Testing with SWAPI C# Implementing tests for an API 30 mins C Sharp Web App C# Working with .NET Web Technologies and unit tests 1 hour Interest Calculator C++ Building an interest calculator with unit tests 30 mins HTML Image Gallery with MCP HTML/Javascript Using GitHub Copilot agent mode with MCP servers for advanced web development 45-60 mins Build Your Own MCP Server Multi-language Creating a custom MCP weather server that extends GitHub Copilot's capabilities 60-90 mins"},{"location":"hands-on/#how-to-use-these-labs","title":"How to Use These Labs \ud83c\udf93","text":"<p>Each lab is designed to be self-contained and includes:</p> <ol> <li>Clear Instructions: Step-by-step guidance on what to do</li> <li>Prompts for GitHub Copilot: Suggestions on how to interact with Copilot</li> <li>Expected Outcomes: What you should achieve by the end of the lab</li> <li>Tips and Solutions: Help if you get stuck</li> </ol>"},{"location":"hands-on/#choosing-the-right-lab","title":"Choosing the Right Lab \ud83c\udfaf","text":"<p>If you're new to GitHub Copilot, we recommend starting with:</p> <ul> <li>Javascript Calculator (for web developers)</li> <li>Rock Paper Scissor (for Python developers)</li> </ul> <p>For more experienced users, try:</p> <ul> <li>Star Wars API Client (for Java developers)</li> <li>C Sharp Web App (for .NET developers)</li> </ul>"},{"location":"hands-on/#featured-labs","title":"Featured Labs \ud83c\udf1f","text":"<p>In this workshop, we'll be focusing on two labs in particular:</p>"},{"location":"hands-on/#html-image-gallery","title":"HTML Image Gallery \ud83d\uddbc\ufe0f","text":"<p>Build an interactive image gallery with animations using HTML, CSS, and JavaScript. This lab demonstrates how GitHub Copilot can help with front-end development tasks.</p>"},{"location":"hands-on/#star-wars-api-client-in-java","title":"Star Wars API Client in Java \ud83d\ude80","text":"<p>Create a Java client for the Star Wars API, including DTOs, interfaces, implementations, and tests. This lab showcases GitHub Copilot's ability to understand and implement complex API interactions.</p>"},{"location":"hands-on/#star-wars-api-client-in-python","title":"Star Wars API Client in Python \ud83d\ude80","text":"<p>Build a Python client for the Star Wars API, using data classes, abstract base classes, and tests. This lab guides you step-by-step through creating a reusable API client, writing unit tests, and leveraging GitHub Copilot to accelerate development.</p>"},{"location":"hands-on/#html-image-gallery-with-mcp","title":"HTML Image Gallery with MCP \ud83e\udd16","text":"<p>Learn how to use GitHub Copilot's agent mode with Model Context Protocol (MCP) servers to analyze designer mockups, create GitHub issues, and build interactive web applications. This advanced lab demonstrates leveraging MCP tools for repository management and automated testing with Playwright.</p>"},{"location":"hands-on/#build-your-own-mcp-server","title":"Build Your Own MCP Server \u26a1","text":"<p>Create a custom Model Context Protocol (MCP) weather server that integrates with VS Code and GitHub Copilot to provide real-time weather forecasts and alerts. This intermediate lab teaches you how to build MCP servers that extend GitHub Copilot's capabilities with external APIs.</p>"},{"location":"hands-on/#other-labs","title":"Other Labs","text":"<p>Explore additional hands-on labs covering a variety of languages and scenarios. These labs provide more opportunities to practice and discover the capabilities of GitHub Copilot.</p> <p>Choose a lab that matches your interests and skill level, and let's start coding with GitHub Copilot! \ud83d\udcbb</p>"},{"location":"hands-on/gh-gallery-mcp/","title":"HTML Image Gallery with Model Context Protocol (MCP)","text":"<p>Happy you find your way to this exercise. This exercise demonstrates how to leverage an agent to interpret a designer mockup, use the GitHub Copilot MCP server to generate issues, read repository information, and more. Furthermore we will use the Playwright MCP server to generate tests for the Polaroid image gallery.</p> <p>The main purpose of this demo is to provide a hands-on experience with GitHub Copilot, the new agent mode and its integration with MCP servers.</p>"},{"location":"hands-on/gh-gallery-mcp/#lab-overview","title":"Lab Overview \ud83d\udccb","text":"<p>Duration: 45-60 minutes Difficulty: Intermediate  </p>"},{"location":"hands-on/gh-gallery-mcp/#good-to-know","title":"Good to know","text":"<p>This exercise is a successor of the Polaroid image gallery exercise we use for our fundamentals course. You find that exercise here. It does make sense to let your participants do the fundamentals course first and then this exercise to also show how much more powerful the GitHub Copilot agent mode is.</p> <p>The results are non-deterministic!</p> <p>Even though you are using the same prompt, the agent might generate different code each time. This is normal and expected!</p> <p>It is NOT possible to write a deterministic training and exercise for GitHub Copilot and the experience will be different for each participant. You need to deal with this. Safeguarding your code is a necessity and you should always use version control and automated testing to keep track of your changes when using GitHub Copilot. </p>"},{"location":"hands-on/gh-gallery-mcp/#prerequisites","title":"Prerequisites","text":"<p>Please create a fork of this repository to your own GitHub account. After forking the repository Issues need to be enabled. This will allow you to make changes and experiment with the code without affecting the original repository.</p> <p>Afterwards, you can clone that repository to your local machine or have it open in a GitHub Codespace.</p> <p>To use GitHub Copilot with MCP, you need to create a GitHub Personal Access Token (PAT). Use this link to create a PAT: Create GitHub PAT</p> <p>You also need to have the GitHub Copilot extension installed and configured in your IDE. If you are using a local machine, make sure you have the MCP server running as well - we will do this in the next steps.</p>"},{"location":"hands-on/gh-gallery-mcp/#mcp-servers","title":"MCP Servers","text":"<p>Before we start, you need to make sure that the MCP servers are running. You can do this by clicking on <code>start</code> when opening the <code>.vscode/mcp.json</code> file. This will start the MCP servers!</p> <p>Always make sure that you need to start the right GitHub MCP server based on how you have started this exercise - either on your local machine or in a GitHub Codespace. The official documentation for MCP in VS Code can be found here.</p> <p></p> <p>When starting the GitHub MCP server, you will be prompted to enter your GitHub Personal Access Token (PAT). This is required to authenticate with the GitHub API and allows the MCP server to access your repositories and other information. </p> <p>You can create a PAT by following the instructions in the GitHub documentation.</p>"},{"location":"hands-on/gh-gallery-mcp/#check-your-mcp-servers-running","title":"Check your MCP servers running","text":"<p>We are using the following MCP servers in this demo:</p> <ul> <li>GitHub Copilot MCP<ul> <li>This is the MCP server that gives GitHub Copilot access to the GitHub API and allows you to generate issues, read repository information, and more.</li> </ul> </li> <li>Playwright MCP<ul> <li>This is the MCP server that gives GitHub Copilot access to the Playwright API and allows you to generate tests, read browser information, and more.</li> </ul> </li> </ul> <p>Switch over to the GitHub Copilot Chat and check within the input panel the <code>tools button</code>.</p> <p></p> <p>After clicking on the tools button, you should see the following:</p> <p></p> <p>Enable all tools for your GitHub MCP server and the Playwright MCP server.</p>"},{"location":"hands-on/gh-gallery-mcp/#step-1-creating-an-issue-in-your-repository-to-implement-the-polaroid-image-gallery","title":"Step 1: Creating an issue in your repository to implement the Polaroid image gallery","text":"<p>We will leverage the GitHub Copilot MCP server to create an issue in your repository. This issue will contain the requirements for the Polaroid image gallery based on the designer mockup.</p> <p>Switch over to the GitHub Copilot Chat and drag the crazy_mockup.png (ghcp-mcp/html/mockup) file into the chat input panel. This will upload the image to the chat and allow the agent to analyze it. Be sure to use <code>Claude 3.7 Sonnet</code> or another reasoning model for this task (that is capable of dealing with images). A reasoning model is recommended to analyze the image and create an issue with the requirements.</p> <p>Open the basic <code>index.html</code> file in an active tab, and use the following prompt to create the issue:</p> <pre><code>Create an issue in my repository to implement a Polaroid image gallery based on the designer mockup I just uploaded. The issue should contain the requirements for the Polaroid image gallery and a list of tasks to complete. The issue should emphasize the need for a 3x3 grid layout and the minimal use of javascript.\n\nCreate the issue in the upstream repository of this repository on github.com. I am the owner of this repository and have access to the upstream repository.\n</code></pre> <p>When the agent is running, there will come additional questions or clarifications. This is normal and expected. The agent will ask you to clarify the requirements and it will also ask you to press a button. Do that.</p> <p>Whenever the agent likes to leverage a MCP server to progress, it will ask you to press a button. This is normal and expected.</p> <p>Here is an example of how this looks like: </p> <p>When the agent is done, you should see an issue created in your repository.</p> <p>Note</p> <p>Follow the link to the issue and check if the requirements are correct. If not, you can always ask the agent to update the issue!</p> <p>Congratulations! You have successfully created an issue in your repository using the GitHub Copilot MCP server and the agent mode.</p> <p>Now we will use the GitHub Copilot MCP server to create the Polaroid image gallery based on the requirements in the issue we just created.</p>"},{"location":"hands-on/gh-gallery-mcp/#step-2-create-the-polaroid-image-gallery","title":"Step 2: Create the Polaroid image gallery","text":"<p>Switch over to the GitHub Copilot Chat. For the sake of the demo we will create a new session.</p> <p>Press the <code>+</code> button in the top right corner of the chat window to create a new session. This will allow you to start a new conversation with the agent, but keep the previous conversation intact.</p> <p></p>"},{"location":"hands-on/gh-gallery-mcp/#reading-all-issues-in-the-repository","title":"Reading all issues in the repository","text":"<p>In order to create the Polaroid image gallery, we need to read the issue we just created. We can do this by using the GitHub Copilot MCP server to read all issues in the repository. Use the following prompt to read all issues in the repository:</p> <pre><code>Read all issues in the upstream repository of this repository on github.com. I am the owner of this repository and have access to the upstream repository. \n</code></pre> <p>The agent will leverage the GitHub Copilot MCP server to read all issues in the repository. This will allow the agent to access the issue we just created and use it as a reference for creating the Polaroid image gallery.</p> <p>A result should look like this:</p> <p></p>"},{"location":"hands-on/gh-gallery-mcp/#let-the-agent-create-the-polaroid-image-gallery-for-us","title":"Let the agent create the Polaroid image gallery for us","text":"<p>Now we can let the agent create the Polaroid image gallery for us. Be sure to select <code>Claude Sonnet 4</code> for this task. Use the following prompt to create the Polaroid image gallery - adjust the prompt to target your own issue number:</p> <pre><code>Take issue #44 and implement it based on the requirements and infos in this issue. Try to be minimalistic and use as less javascript as possible. Keep the HTML and CSS as clean as possible and within the index.html file.\n</code></pre> <p>It will take some time for the agent to create the gallery. When the agent is done, you should see the Polaroid image gallery created in your repository. You need to press the <code>keep</code> button to keep the code.</p> <p>Right click the <code>index.html</code> file and open it with <code>Live Server</code>: </p> <p></p> <p>Look at the Polaroid image gallery in your browser. We might have to fix some bugs now.</p>"},{"location":"hands-on/gh-gallery-mcp/#fixing-rick-roll-sound-bug","title":"Fixing Rick Roll sound bug","text":"<p>The Rick Roll sound might not work when clicking on an image please use the following prompt to fix this issue:</p> <pre><code>Fix the Rick Roll sound bug in the Polaroid image gallery. The sound should play when clicking on an image. https://media.memesoundeffects.com/2023/03/Rick-Roll-Sound-djlunatique.com_.mp3 as a src for the audio.\n</code></pre>"},{"location":"hands-on/gh-gallery-mcp/#fix-the-nyan-cat-bug","title":"Fix the nyan cat bug","text":"<p>The Nyan Cat might now fly in the Polaroid image gallery. Please use the following prompt to fix this issue:</p> <pre><code>There is no nyan cat flying in the Polaroid image gallery. Please fix this issue and make the nyan cat fly in the Polaroid image gallery in the footer from left to right. Use the following image as a src: https://media.tenor.com/E3MLgDP1qoQAAAAi/nyan-cat-transparent.gif \n</code></pre>"},{"location":"hands-on/gh-gallery-mcp/#fixing-other-bugs","title":"Fixing other bugs","text":"<p>Interact with the agent and ask it to fix other bugs. You can also ask the agent to improve the code and make it more readable. Give the agent clear instructions and it will do its best to help you. </p> <p>You can also reference old tasks and refine them by giving the agent clear feedback.</p> <p>Copilot Tip</p> <p>Use a new session if you have the feeling your prompts are leading to nowhere. This is normal and expected. The agent will sometimes get stuck in a loop and you need to start a new session to get it back on track.</p>"},{"location":"hands-on/gh-gallery-mcp/#step-3-create-tests-for-the-polaroid-image-gallery","title":"Step 3: Create tests for the Polaroid image gallery","text":"<p>Be Aware!</p> <p>This step is only working if you are running the exercise on your local machine!</p> <p>Now we will use the Playwright MCP server to create tests for the Polaroid image gallery. The Playwright MCP server allows us to generate tests for our application and run them in different browsers.</p> <p>We would like to create a simple test that checks if the rick roll sound is playing when clicking on an image. We will use the Playwright MCP server to create this test.</p> <p>Switch over to the GitHub Copilot Chat and create a new session. Use the following prompt to create the tests:</p> <pre><code>Use Playwright to open the browser at http://127.0.0.1:5500/html/index.html and click on an image. Concentrate solely on that task and nothing else.\n</code></pre> <p>The agent can create a test for you that opens the browser and clicks on an image.</p> <p>Afterwards use the following prompt to create a test that checks if the rick roll sound is playing when clicking on an image:</p> <pre><code>Can you create an automated test out of this? \n</code></pre> <p>Last one is complex and might take some time. The agent will create a test for you that checks if the rick roll sound is playing when clicking on an image.</p> <p>If the test is NOT working, then still move on the next step. The agent is still getting improved and this is a complex task.</p>"},{"location":"hands-on/gh-gallery-mcp/#step-4-close-the-issue","title":"Step 4: Close the issue","text":"<p>Now we can close the issue we created in the first step. Use the following prompt to close the issue:</p> <pre><code>Close the issue #44 in the upstream repository of this repository on github.com. I am the owner of this repository and have access to the upstream repository. \n</code></pre> <p>Confirm the update and the issue will be closed. Check the issue in your repository and make sure it is closed.</p>"},{"location":"hands-on/gh-gallery-mcp/#summary","title":"Summary \ud83d\udcdd","text":"<p>In this lab, you've learned how to:</p> <ul> <li>Use GitHub's Model Context Protocol (MCP) servers to interact with GitHub repositories using Github Copilot, and create issues programmatically</li> <li>Leverage the GitHub Copilot agent mode with reasoning models to analyze designer mockups and translate them into technical requirements</li> <li>Create a Polaroid image gallery implementation based on GitHub issue requirements using minimal JavaScript</li> <li>Use the Playwright MCP server to generate automated tests for web applications</li> <li>Debug and fix issues in generated code through iterative prompting with the agent</li> <li>Manage GitHub issues lifecycle by programmatically closing completed tasks using MCP tools</li> </ul> <p>You can watch the following video to learn more about MCP and how to use it with GitHub Copilot:</p> <p></p> <p>Contributed by: Jeffrey Groneberg</p>"},{"location":"hands-on/html-gallery/","title":"HTML Image Gallery Lab \ud83d\uddbc\ufe0f","text":"<p>In this hands-on lab, you'll build an interactive image gallery with animations using HTML, CSS, and JavaScript with the help of GitHub Copilot! This lab demonstrates how GitHub Copilot can assist with front-end development tasks.</p>"},{"location":"hands-on/html-gallery/#lab-overview","title":"Lab Overview \ud83d\udccb","text":"<p>Duration: 45 minutes Difficulty: Beginner-Intermediate Prerequisites: Basic knowledge of HTML, CSS, and JavaScript  </p>"},{"location":"hands-on/html-gallery/#what-youll-build","title":"What You'll Build \ud83c\udfd7\ufe0f","text":"<p>A beautiful polaroid-style image gallery with the following features:</p> <ul> <li>Grid layout for displaying images</li> <li>Hover effects with opacity changes</li> <li>Rotation animations on hover</li> <li>Click functionality to remove images</li> </ul>"},{"location":"hands-on/html-gallery/#reqirements","title":"Reqirements \ud83d\udcbb","text":"<ul> <li>IDE, e.g. Visual Studio Code</li> <li>Live Server extension</li> </ul>"},{"location":"hands-on/html-gallery/#getting-started","title":"Getting Started \ud83d\ude80","text":""},{"location":"hands-on/html-gallery/#step-1-create-a-basic-html-structure","title":"Step 1: Create a Basic HTML Structure","text":"<p>First, let's create a basic HTML structure for our page. Create an empty <code>index.html</code> file and open it in your editor and ask GitHub Copilot to help you create a basic HTML structure.</p> <p>Copilot Tip</p> <p>Try typing a comment like <code>&lt;!-- very basic structure of a modern html page with head body etc --&gt;</code> and let Copilot generate the initial HTML structure.</p> Click here to see the initial HTML <pre><code>&lt;!-- very basic structure of a modern html page with head body etc --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My First HTML Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World!&lt;/h1&gt;\n    &lt;p&gt;This is my first HTML page.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>You can have a look at your html file in the browser by right clicking on the file and selecting <code>Open with Live Server</code>:</p> <p></p>"},{"location":"hands-on/html-gallery/#step-2-add-an-image-gallery","title":"Step 2: Add an Image Gallery","text":"<p>Now, let's add an image gallery to our page. We'll use GitHub Copilot to help us create a grid of images.</p> <p>Copilot Tip</p> <p>Add a comment describing what you want to create, such as <code>&lt;!-- image gallery using random images from the picsum page. For further styling already add appropriate classes. All images should have the same width and height --&gt;</code></p> After Copilot generates the code, your HTML should include something like: <pre><code>&lt;!-- very basic structure of a modern html page with head body etc --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My First HTML Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World!&lt;/h1&gt;\n    &lt;p&gt;This is my first HTML page.&lt;/p&gt;\n    &lt;!-- image gallery using random images from the picsum page. For further styling already add appropriate classes. All images should have the same width and height --&gt;\n      &lt;div class=\"gallery\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 1\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 2\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 3\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 4\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 5\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 6\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 7\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 8\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200\" alt=\"image 9\"&gt;\n  &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Optionally, ask Copilot Chat if it is possible to make the images different from each other. You can use the <code>?random=</code> query parameter to get different images.</p> Sample way to have different images from each other <pre><code>&lt;!-- very basic structure of a modern html page with head body etc --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My First HTML Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World!&lt;/h1&gt;\n    &lt;p&gt;This is my first HTML page.&lt;/p&gt;\n    &lt;!-- image gallery using random images from the picsum page. For further styling already add appropriate classes. All images should have the same width and height --&gt;\n      &lt;div class=\"gallery\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200?random=1\" alt=\"image 1\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200?random=2\" alt=\"image 2\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200?random=3\" alt=\"image 3\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200?random=4\" alt=\"image 4\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200?random=5\" alt=\"image 5\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200?random=6\" alt=\"image 6\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200?random=7\" alt=\"image 7\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200?random=8\" alt=\"image 8\"&gt;\n    &lt;img src=\"https://picsum.photos/200/200?random=9\" alt=\"image 9\"&gt;\n  &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"hands-on/html-gallery/#step-3-style-the-gallery-with-css","title":"Step 3: Style the Gallery with CSS","text":"<p>Let's add some CSS to style our gallery. We'll create a 3 by 3 grid layout and add some basic styling to the images. We want the images to have a polaroid effect.</p> <p>Copilot Tip</p> <p>Add a style tag in the head section and add a comment describing the styling you want to create. Or you can use Copilot Ask or Edit Mode to generate the styling for the polaroid effect.</p> <p>You can use the following prompt in Github Copilot chat to generate the CSS code for the polaroid effect: <code>I want images in the gallery to have a 3 by 3 grid layout and look like a polaroid photo. What do I need to add?</code></p> Add this to your head section: <pre><code>&lt;style&gt;\n  /* 3x3 Gallery grid layout */\n  .gallery {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 10px;\n    justify-content: center;\n    align-items: center;\n    margin: 0 auto;\n    width: 600px;\n    position: relative;\n  }\n  /* Image styles */\n  .gallery img {\n    width: 200px;\n    height: 200px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n    border: 15px solid white;\n    border-radius: 5px;\n    transition: opacity 0.5s, transform 0.5s;\n  }\n&lt;/style&gt;\n</code></pre>"},{"location":"hands-on/html-gallery/#step-4-add-hover-effects","title":"Step 4: Add Hover Effects","text":"<p>Now, let's add some hover effects to make our gallery more interactive. The images should wobble when you hover over them in an infinite loop. We also want to reduce the opacity of the non-hovered images.</p> <p>Copilot Tip</p> <p>Ask Github Copilot Ask/Edit Mode to generate the styling code for hovering effects. Remember to have the index.html file open in the editor.</p> <p>Inspect the result and accept the changes made under <code>&lt;style&gt;</code> tag in your html file.</p> Sample style addition to your existing style tag: <pre><code>/* Image hover styles */\n.gallery img:hover {\n  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n  animation: rotate 2s infinite;\n  opacity: 1 !important;\n}\n/* Gallery hover styles */\n.gallery:hover img {\n  opacity: 0.6;\n}\n/* Image rotation animation */\n@keyframes rotate {\n  0%, 100% {\n    transform: rotate(0deg);\n  }\n  50% {\n    transform: rotate(5deg);\n  }\n}\n</code></pre> <p>Play around with the values of the keyframes to see how the wobble effect changes.</p> <p>Refresh your browser to see the opacity effect on the non-hovered images in the gallery. Hover with your mouse over the different images to see the opacity effect.</p>"},{"location":"hands-on/html-gallery/#step-5-add-click-functionality-to-remove-images","title":"Step 5: Add Click Functionality to Remove Images","text":"<p>In this step, you will add JavaScript to remove an image from the gallery when you click on it.</p> <p>Copilot Tip</p> <p>Use GitHub Copilot chat to generate the JavaScript code for removing an image from the gallery when you click on it. Remember to have the index.html file open in the editor, or add the file as context.</p> <p>You can use the following prompt in the chat: <code>I would like to remove an element from the image gallery when clicking on it. Can you return the whole html page with the new added javascript?</code></p> <p>After adding the JavaScript, your complete HTML should look something like the sample below.</p> Sample solution after adding the JavaScript <pre><code>&lt;!-- very basic structure of a modern html page with head body etc --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My First HTML Page&lt;/title&gt;\n    &lt;style&gt;\n      /* Gallery grid layout */\n      .gallery {\n        display: grid;\n        grid-template-columns: repeat(3, 1fr);\n        grid-gap: 10px;\n        justify-content: center;\n        align-items: center;\n        margin: 0 auto;\n        width: 600px;\n        position: relative;\n      }\n      /* Image styles */\n      .gallery img {\n        width: 200px;\n        height: 200px;\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n        border: 15px solid white;\n        border-radius: 5px;\n        transition: opacity 0.5s, transform 0.5s;\n      }\n      /* Image hover styles */\n      .gallery img:hover {\n        box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n        animation: rotate 2s infinite;\n        opacity: 1 !important;\n      }\n      /* Gallery hover styles */\n      .gallery:hover img {\n        opacity: 0.6;\n      }\n      .fade-out {\n        opacity: 0;\n        transition: opacity 3s ease-out;\n      }\n      /* Image rotation animation */\n      @keyframes rotate {\n        0%,\n        100% {\n          transform: rotate(0deg);\n        }\n        50% {\n          transform: rotate(5deg);\n        }\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- image gallery using random images from the picsum page. For further styling already add appropriate classes. All images should have the same width and height --&gt;\n    &lt;div class=\"gallery\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200?random=1\" alt=\"image 1\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200?random=2\" alt=\"image 2\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200?random=3\" alt=\"image 3\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200?random=4\" alt=\"image 4\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200?random=5\" alt=\"image 5\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200?random=6\" alt=\"image 6\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200?random=7\" alt=\"image 7\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200?random=8\" alt=\"image 8\"&gt;\n      &lt;img src=\"https://picsum.photos/200/200?random=9\" alt=\"image 9\"&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n      // Select all images in the gallery\n      var images = document.querySelectorAll(\".gallery img\");\n      // Add an event listener to each image\n      images.forEach(function (image) {\n        image.addEventListener(\"click\", function (e) {\n          // Remove the image when it's clicked\n          e.target.remove();\n        });\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Copilot Tip</p> <p>Ask Copilot chat why a script tag can be placed in the body tag: \"Why is it better in this case to place the script tag at the end of the body tag?\"</p>"},{"location":"hands-on/html-gallery/#bonus-challenge-using-agent-mode-vision-input-to-create-the-gallery","title":"Bonus Challenge: Using Agent Mode &amp; Vision Input to create the gallery \ud83d\uddbc\ufe0f","text":"<p>In this step, we'll leverage GitHub Copilot\u2019s Agent Mode and Vision Input to transform a mockup image into a fully functional HTML page with embedded CSS.</p> <p>Add the following mockup image to the Github Copilot as context, by copying it and pasting it in Copilot chat.</p> Mockup image for the gallery <p></p> <p>Prompt for Copilot Agent Mode:</p> <p>Can you create an HTML page for me with the given mockup? Please take a close look at the designer's remarks marked with arrows! Render one HTML page with embedded CSS. Photos should have a white background.</p> <p>Here are the steps you can follow:</p> <ol> <li>Create a new HTML file (e.g., <code>index-agent.html</code>).</li> <li>Open GitHub Copilot Chat and switch to Agent Mode.  </li> <li>Upload the mockup image via pasting it to the chat or by clicking <code>Add Context</code> button.  </li> <li>Paste the prompt above and submit.  </li> <li>Accept the generated HTML &amp; CSS code from Copilot.</li> <li>Preview with Live Server.</li> </ol> <p>What do you think about this result? Is it better than your previous work?</p>"},{"location":"hands-on/html-gallery/#additional-bonus-challenges","title":"Additional Bonus Challenges \ud83c\udf1f","text":"<p>If you have extra time, try these bonus challenges with GitHub Copilot:</p> <ol> <li>Add a button to reset the gallery (bring back all removed images)</li> <li>Add a fade-out animation before removing the images</li> <li>Add a counter to show how many images are currently displayed</li> <li>Add a filter effect (like grayscale or sepia) on hover</li> </ol>"},{"location":"hands-on/html-gallery/#summary","title":"Summary \ud83d\udcdd","text":"<p>In this lab, you've learned how to:</p> <ul> <li>Use GitHub Copilot to generate HTML, CSS, and JavaScript code</li> <li>Create an interactive image gallery with hover effects and animations</li> <li>Implement click functionality to remove elements from the DOM</li> <li>Use GitHub Copilot chat to get explanations and improve your code</li> </ul> <p>GitHub Copilot has helped you write code faster and with less effort, allowing you to focus on the creative aspects of your project rather than the implementation details. This is just a small example of how AI-assisted coding can enhance your development workflow! \ud83d\ude80</p> <p>Contributed by: Jeffrey Groneberg</p>"},{"location":"hands-on/mcp-server-starter/","title":"Build Your Own MCP Server","text":"<p>In this tutorial, we'll build a simple MCP (Model Context Protocol) weather server and connect it to VS Code with GitHub Copilot. We'll start with a basic setup, and then progress to more complex use cases.</p>"},{"location":"hands-on/mcp-server-starter/#lab-overview","title":"Lab Overview \ud83d\udccb","text":"<p>Duration: 60-90 minutes Difficulty: Intermediate</p> <p>This lab is mainly based on the Model Context Protocol's quickstart guide to create an MCP server, with additional VS Code integration guides, screenshots, and step-by-step instructions for GitHub Copilot integration.</p>"},{"location":"hands-on/mcp-server-starter/#what-well-be-building","title":"What we'll be building","text":"<p>Many LLMs do not currently have the ability to fetch live weather forecasts and severe weather alerts. Let's use MCP to solve that!</p> <p>We'll build a server that exposes two tools: <code>get-alerts</code> and <code>get-forecast</code>. Then we'll connect the server to VS Code through the MCP configuration:</p> <p></p> <p>This guide focuses on VS Code integration. While servers can connect to any MCP client, we've chosen VS Code here because it's our primary IDE and offers excellent integration with GitHub Copilot.</p>"},{"location":"hands-on/mcp-server-starter/#prerequisites","title":"Prerequisites","text":"<p>This demonstration assumes you have familiarity with Large Language Models (LLMs).</p> <p>Before we start, make sure you have:</p> <ul> <li>VS Code installed with the GitHub Copilot extension enabled</li> <li>Basic familiarity with your chosen programming language. and its installation</li> <li>Understanding of REST APIs and JSON</li> </ul>"},{"location":"hands-on/mcp-server-starter/#core-mcp-concepts","title":"Core MCP Concepts","text":"<p>MCP servers can provide three main types of capabilities:</p> <ol> <li>Resources: File-like data that can be read by clients (like API responses or file contents)</li> <li>Tools: Functions that can be called by the LLM (with user approval)</li> <li>Prompts: Pre-written templates that help users accomplish specific tasks</li> </ol> <p>This tutorial will primarily focus on tools.</p>"},{"location":"hands-on/mcp-server-starter/#implementation","title":"Implementation","text":"<p>Choose your preferred programming language to build the MCP server:</p> PythonTypeScriptJavaKotlinC# <p>Let's get started with building our weather server! You can find the complete code for what we'll be building here.</p> <p>Let's get started with building our weather server! You can find the complete code for what we'll be building here.</p> <p>Let's get started with building our weather server! You can find the complete code for what we'll be building here.</p> <p>Spring AI MCP Integration</p> <p>This guide uses Spring AI MCP auto-configuration and boot starters for simplified development. For manual MCP server creation, consult the Java SDK documentation.</p> <p>Let's get started with building our weather server! You can find the complete code for what we'll be building here.</p> <p>Let's get started with building our weather server! You can find the complete code for what we'll be building here.</p>"},{"location":"hands-on/mcp-server-starter/#python-system-requirements","title":"Python System requirements","text":"<ul> <li>Python 3.10 or higher installed</li> <li>You must use the Python MCP SDK 1.2.0 or higher</li> </ul>"},{"location":"hands-on/mcp-server-starter/#set-up-your-environment","title":"Set up your environment","text":"<p>First, let's install <code>uv</code> and set up our Python project and environment:</p> WindowsmacOS/Linux <pre><code># Install uv package manager\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <pre><code># Install uv package manager\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Make sure to restart your terminal afterwards to ensure that the <code>uv</code> command gets picked up.</p> <p>Now, let's create and set up our project:</p> WindowsmacOS/Linux <pre><code># Create a new directory for our project\nuv init weather-mcp\ncd weather-mcp\n\n# Create virtual environment and activate it\nuv venv\n.venv\\Scripts\\activate\n\n# Install dependencies\nuv add \"mcp[cli]\" httpx\n\n# Create our server file\nnew-item weather.py\n</code></pre> <pre><code># Create a new directory for our project\nuv init weather-mcp\ncd weather-mcp\n\n# Create virtual environment and activate it\nuv venv\nsource .venv/bin/activate\n\n# Install dependencies\nuv add \"mcp[cli]\" httpx\n\n# Create our server file\ntouch weather.py\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#building-your-server","title":"Building your server","text":""},{"location":"hands-on/mcp-server-starter/#importing-packages-and-setting-up-the-instance","title":"Importing packages and setting up the instance","text":"<p>Add these to the top of your <code>weather.py</code>:</p> <pre><code>from typing import Any\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\n\n# Initialize FastMCP server\nmcp = FastMCP(\"weather\")\n\n# Constants\nNWS_API_BASE = \"https://api.weather.gov\"\nUSER_AGENT = \"weather-app/1.0\"\n</code></pre> <p>The FastMCP class uses Python type hints and docstrings to automatically generate tool definitions, making it easy to create and maintain MCP tools.</p>"},{"location":"hands-on/mcp-server-starter/#helper-functions","title":"Helper functions","text":"<p>Next, let's add our helper functions for querying and formatting the data from the National Weather Service API:</p> <pre><code>async def make_nws_request(url: str) -&gt; dict[str, Any] | None:\n    \"\"\"Make a request to the NWS API with proper error handling.\"\"\"\n    headers = {\n        \"User-Agent\": USER_AGENT,\n        \"Accept\": \"application/geo+json\"\n    }\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(url, headers=headers, timeout=30.0)\n            response.raise_for_status()\n            return response.json()\n        except Exception:\n            return None\n\ndef format_alert(feature: dict) -&gt; str:\n    \"\"\"Format an alert feature into a readable string.\"\"\"\n    props = feature[\"properties\"]\n    return f\"\"\"\nEvent: {props.get('event', 'Unknown')}\nArea: {props.get('areaDesc', 'Unknown')}\nSeverity: {props.get('severity', 'Unknown')}\nDescription: {props.get('description', 'No description available')}\nInstructions: {props.get('instruction', 'No specific instructions provided')}\n\"\"\"\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#implementing-tool-execution","title":"Implementing tool execution","text":"<p>The tool execution handler is responsible for actually executing the logic of each tool. Let's add it:</p> <pre><code>@mcp.tool()\nasync def get_alerts(state: str) -&gt; str:\n    \"\"\"Get weather alerts for a US state.\n\n    Args:\n        state: Two-letter US state code (e.g. CA, NY)\n    \"\"\"\n    url = f\"{NWS_API_BASE}/alerts/active/area/{state}\"\n    data = await make_nws_request(url)\n\n    if not data or \"features\" not in data:\n        return \"Unable to fetch alerts or no alerts found.\"\n\n    if not data[\"features\"]:\n        return \"No active alerts for this state.\"\n\n    alerts = [format_alert(feature) for feature in data[\"features\"]]\n    return \"\\n---\\n\".join(alerts)\n\n@mcp.tool()\nasync def get_forecast(latitude: float, longitude: float) -&gt; str:\n    \"\"\"Get weather forecast for a location.\n\n    Args:\n        latitude: Latitude of the location\n        longitude: Longitude of the location\n    \"\"\"\n    # First get the forecast grid endpoint\n    points_url = f\"{NWS_API_BASE}/points/{latitude},{longitude}\"\n    points_data = await make_nws_request(points_url)\n\n    if not points_data:\n        return \"Unable to fetch forecast data for this location.\"\n\n    # Get the forecast URL from the points response\n    forecast_url = points_data[\"properties\"][\"forecast\"]\n    forecast_data = await make_nws_request(forecast_url)\n\n    if not forecast_data:\n        return \"Unable to fetch detailed forecast.\"\n\n    # Format the periods into a readable forecast\n    periods = forecast_data[\"properties\"][\"periods\"]\n    forecasts = []\n    for period in periods[:5]:  # Only show next 5 periods\n        forecast = f\"\"\"\n{period['name']}:\nTemperature: {period['temperature']}\u00b0{period['temperatureUnit']}\nWind: {period['windSpeed']} {period['windDirection']}\nForecast: {period['detailedForecast']}\n\"\"\"\n        forecasts.append(forecast)\n\n    return \"\\n---\\n\".join(forecasts)\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#running-the-server","title":"Running the server","text":"<p>Finally, let's initialize and run the server:</p> <pre><code>if __name__ == \"__main__\":\n    # Initialize and run the server\n    mcp.run(transport='stdio')\n</code></pre> <p>Your server is complete! Run <code>uv run weather.py</code> to confirm that everything's working.</p>"},{"location":"hands-on/mcp-server-starter/#typescript-system-requirements","title":"TypeScript System requirements","text":"<p>For TypeScript, make sure you have the latest version of Node installed.</p>"},{"location":"hands-on/mcp-server-starter/#set-up-your-environment_1","title":"Set up your environment","text":"<p>First, let's install Node.js and npm if you haven't already. You can download them from nodejs.org. Verify your Node.js installation:</p> WindowsmacOS/Linux <pre><code>node --version\nnpm --version\n</code></pre> <pre><code>node --version\nnpm --version\n</code></pre> <p>For this tutorial, you'll need Node.js version 16 or higher.</p> <p>Now, let's create and set up our project:</p> WindowsmacOS/Linux <pre><code># Create a new directory for our project\nmkdir weather-mcp\ncd weather-mcp\n\n# Initialize a new npm project\nnpm init -y\n\n# Install dependencies\nnpm install @modelcontextprotocol/sdk zod\nnpm install -D @types/node typescript\n\n# Create our files\nmkdir src\nnew-item src\\index.ts\n</code></pre> <pre><code># Create a new directory for our project\nmkdir weather-mcp\ncd weather-mcp\n\n# Initialize a new npm project\nnpm init -y\n\n# Install dependencies\nnpm install @modelcontextprotocol/sdk zod\nnpm install -D @types/node typescript\n\n# Create our files\nmkdir src\ntouch src/index.ts\n</code></pre> <p>Update your <code>package.json</code> to add type: \"module\" and a build script:</p> <pre><code>{\n  \"type\": \"module\",\n  \"bin\": {\n    \"weather\": \"./build/index.js\"\n  },\n  \"scripts\": {\n    \"build\": \"tsc\"\n  },\n  \"files\": [\"build\"]\n}\n</code></pre> <p>Create a <code>tsconfig.json</code> in the root of your project:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"Node16\",\n    \"moduleResolution\": \"Node16\",\n    \"outDir\": \"./build\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\"]\n}\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#building-your-server_1","title":"Building your server","text":""},{"location":"hands-on/mcp-server-starter/#importing-packages-and-setting-up-the-instance_1","title":"Importing packages and setting up the instance","text":"<p>Add these to the top of your <code>src/index.ts</code>:</p> <pre><code>import { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { z } from \"zod\";\n\nconst NWS_API_BASE = \"https://api.weather.gov\";\nconst USER_AGENT = \"weather-app/1.0\";\n\n// Create server instance\nconst server = new McpServer({\n  name: \"weather\",\n  version: \"1.0.0\",\n  capabilities: {\n    resources: {},\n    tools: {},\n  },\n});\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#helper-functions_1","title":"Helper functions","text":"<p>Next, let's add our helper functions for querying and formatting the data from the National Weather Service API:</p> <pre><code>// Helper function for making NWS API requests\nasync function makeNWSRequest&lt;T&gt;(url: string): Promise&lt;T | null&gt; {\n  const headers = {\n    \"User-Agent\": USER_AGENT,\n    Accept: \"application/geo+json\",\n  };\n\n  try {\n    const response = await fetch(url, { headers });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return (await response.json()) as T;\n  } catch (error) {\n    console.error(\"Error making NWS request:\", error);\n    return null;\n  }\n}\n\ninterface AlertFeature {\n  properties: {\n    event?: string;\n    areaDesc?: string;\n    severity?: string;\n    status?: string;\n    headline?: string;\n  };\n}\n\n// Format alert data\nfunction formatAlert(feature: AlertFeature): string {\n  const props = feature.properties;\n  return [\n    `Event: ${props.event || \"Unknown\"}`,\n    `Area: ${props.areaDesc || \"Unknown\"}`,\n    `Severity: ${props.severity || \"Unknown\"}`,\n    `Status: ${props.status || \"Unknown\"}`,\n    `Headline: ${props.headline || \"No headline\"}`,\n    \"---\",\n  ].join(\"\\n\");\n}\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#implementing-tool-execution_1","title":"Implementing tool execution","text":"<p>The tool execution handler is responsible for actually executing the logic of each tool. Let's add it:</p> <pre><code>// Register weather tools\nserver.tool(\n  \"get-alerts\",\n  \"Get weather alerts for a state\",\n  {\n    state: z.string().length(2).describe(\"Two-letter state code (e.g. CA, NY)\"),\n  },\n  async ({ state }) =&gt; {\n    const stateCode = state.toUpperCase();\n    const alertsUrl = `${NWS_API_BASE}/alerts?area=${stateCode}`;\n    const alertsData = await makeNWSRequest&lt;AlertsResponse&gt;(alertsUrl);\n\n    if (!alertsData) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"Failed to retrieve alerts data\",\n          },\n        ],\n      };\n    }\n\n    const features = alertsData.features || [];\n    if (features.length === 0) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `No active alerts for ${stateCode}`,\n          },\n        ],\n      };\n    }\n\n    const formattedAlerts = features.map(formatAlert);\n    const alertsText = `Active alerts for ${stateCode}:\\n\\n${formattedAlerts.join(\"\\n\")}`;\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: alertsText,\n        },\n      ],\n    };\n  },\n);\n\nserver.tool(\n  \"get-forecast\",\n  \"Get weather forecast for a location\",\n  {\n    latitude: z.number().min(-90).max(90).describe(\"Latitude of the location\"),\n    longitude: z\n      .number()\n      .min(-180)\n      .max(180)\n      .describe(\"Longitude of the location\"),\n  },\n  async ({ latitude, longitude }) =&gt; {\n    // Get grid point data\n    const pointsUrl = `${NWS_API_BASE}/points/${latitude.toFixed(4)},${longitude.toFixed(4)}`;\n    const pointsData = await makeNWSRequest&lt;PointsResponse&gt;(pointsUrl);\n\n    if (!pointsData) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Failed to retrieve grid point data for coordinates: ${latitude}, ${longitude}. This location may not be supported by the NWS API (only US locations are supported).`,\n          },\n        ],\n      };\n    }\n\n    const forecastUrl = pointsData.properties?.forecast;\n    if (!forecastUrl) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"Failed to get forecast URL from grid point data\",\n          },\n        ],\n      };\n    }\n\n    // Get forecast data\n    const forecastData = await makeNWSRequest&lt;ForecastResponse&gt;(forecastUrl);\n    if (!forecastData) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"Failed to retrieve forecast data\",\n          },\n        ],\n      };\n    }\n\n    const periods = forecastData.properties?.periods || [];\n    if (periods.length === 0) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"No forecast periods available\",\n          },\n        ],\n      };\n    }\n\n    // Format forecast periods\n    const formattedForecast = periods.map((period: ForecastPeriod) =&gt;\n      [\n        `${period.name || \"Unknown\"}:`,\n        `Temperature: ${period.temperature || \"Unknown\"}\u00b0${period.temperatureUnit || \"F\"}`,\n        `Wind: ${period.windSpeed || \"Unknown\"} ${period.windDirection || \"\"}`,\n        `${period.shortForecast || \"No forecast available\"}`,\n        \"---\",\n      ].join(\"\\n\"),\n    );\n\n    const forecastText = `Forecast for ${latitude}, ${longitude}:\\n\\n${formattedForecast.join(\"\\n\")}`;\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: forecastText,\n        },\n      ],\n    };\n  },\n);\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#running-the-server_1","title":"Running the server","text":"<p>Finally, implement the main function to run the server:</p> <pre><code>async function main() {\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  console.error(\"Weather MCP Server running on stdio\");\n}\n\nmain().catch((error) =&gt; {\n  console.error(\"Fatal error in main():\", error);\n  process.exit(1);\n});\n</code></pre> <p>Make sure to run <code>npm run build</code> to build your server! This is a very important step in getting your server to connect.</p>"},{"location":"hands-on/mcp-server-starter/#java-system-requirements","title":"Java System requirements","text":"<ul> <li>Java 17 or higher installed</li> <li>Spring Boot 3.3.x or higher</li> </ul>"},{"location":"hands-on/mcp-server-starter/#set-up-your-environment_2","title":"Set up your environment","text":"<p>Use the Spring Initializer to bootstrap the project, or create it manually:</p> WindowsmacOS/Linux <pre><code># Create a new directory for our project\nmkdir weather-mcp\ncd weather-mcp\n\n# Initialize Maven project structure\nmkdir src\\main\\java\\com\\example\\weather\nmkdir src\\main\\resources\n\n# Create pom.xml\nnew-item pom.xml\n</code></pre> <pre><code># Create a new directory for our project\nmkdir weather-mcp\ncd weather-mcp\n\n# Initialize Maven project structure\nmkdir -p src/main/java/com/example/weather\nmkdir -p src/main/resources\n\n# Create pom.xml\ntouch pom.xml\n</code></pre> <p>Add the following dependencies to your <code>pom.xml</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n         https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.3.0&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;weather-mcp&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;weather-mcp&lt;/name&gt;\n    &lt;description&gt;Weather MCP Server&lt;/description&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;17&lt;/java.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.ai&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-ai-starter-mcp-server&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre> <p>Configure your application by creating <code>src/main/resources/application.properties</code>:</p> <pre><code>spring.main.banner-mode=off\nlogging.pattern.console=\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#building-your-server_2","title":"Building your server","text":""},{"location":"hands-on/mcp-server-starter/#weather-service","title":"Weather Service","text":"<p>Create <code>src/main/java/com/example/weather/WeatherService.java</code>:</p> <pre><code>package com.example.weather;\n\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestClient;\nimport com.fasterxml.jackson.databind.JsonNode;\n\n@Service\npublic class WeatherService {\n\n    private final RestClient restClient;\n\n    public WeatherService() {\n        this.restClient = RestClient.builder()\n            .baseUrl(\"https://api.weather.gov\")\n            .defaultHeader(\"Accept\", \"application/geo+json\")\n            .defaultHeader(\"User-Agent\", \"WeatherApiClient/1.0\")\n            .build();\n    }\n\n    @FunctionCallback(name = \"get_forecast\", description = \"Get weather forecast for a specific latitude/longitude\")\n    public String getWeatherForecast(double latitude, double longitude) {\n        try {\n            // Get points data\n            String pointsUrl = String.format(\"/points/%.4f,%.4f\", latitude, longitude);\n            JsonNode pointsResponse = restClient.get()\n                .uri(pointsUrl)\n                .retrieve()\n                .body(JsonNode.class);\n\n            String forecastUrl = pointsResponse.path(\"properties\").path(\"forecast\").asText();\n\n            // Get forecast data\n            JsonNode forecastResponse = restClient.get()\n                .uri(forecastUrl)\n                .retrieve()\n                .body(JsonNode.class);\n\n            StringBuilder forecast = new StringBuilder();\n            JsonNode periods = forecastResponse.path(\"properties\").path(\"periods\");\n\n            for (int i = 0; i &lt; Math.min(5, periods.size()); i++) {\n                JsonNode period = periods.get(i);\n                forecast.append(String.format(\"\"\"\n                    %s:\n                    Temperature: %d\u00b0%s\n                    Wind: %s %s\n                    Forecast: %s\n                    ---\n                    \"\"\",\n                    period.path(\"name\").asText(),\n                    period.path(\"temperature\").asInt(),\n                    period.path(\"temperatureUnit\").asText(),\n                    period.path(\"windSpeed\").asText(),\n                    period.path(\"windDirection\").asText(),\n                    period.path(\"detailedForecast\").asText()\n                ));\n            }\n\n            return forecast.toString();\n        } catch (Exception e) {\n            return \"Unable to fetch forecast data: \" + e.getMessage();\n        }\n    }\n\n    @FunctionCallback(name = \"get_alerts\", description = \"Get weather alerts for a US state\")\n    public String getAlerts(String state) {\n        try {\n            String alertsUrl = \"/alerts/active/area/\" + state.toUpperCase();\n            JsonNode alertsResponse = restClient.get()\n                .uri(alertsUrl)\n                .retrieve()\n                .body(JsonNode.class);\n\n            JsonNode features = alertsResponse.path(\"features\");\n            if (features.size() == 0) {\n                return \"No active alerts for \" + state.toUpperCase();\n            }\n\n            StringBuilder alerts = new StringBuilder();\n            for (JsonNode feature : features) {\n                JsonNode props = feature.path(\"properties\");\n                alerts.append(String.format(\"\"\"\n                    Event: %s\n                    Area: %s\n                    Severity: %s\n                    Description: %s\n                    Instructions: %s\n                    ---\n                    \"\"\",\n                    props.path(\"event\").asText(),\n                    props.path(\"areaDesc\").asText(),\n                    props.path(\"severity\").asText(),\n                    props.path(\"description\").asText(),\n                    props.path(\"instruction\").asText()\n                ));\n            }\n\n            return alerts.toString();\n        } catch (Exception e) {\n            return \"Unable to fetch alerts data: \" + e.getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#main-application","title":"Main Application","text":"<p>Create <code>src/main/java/com/example/weather/WeatherMcpApplication.java</code>:</p> <pre><code>package com.example.weather;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.model.function.FunctionCallbackProvider;\n\n@SpringBootApplication\npublic class WeatherMcpApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(WeatherMcpApplication.class, args);\n    }\n\n    @Bean\n    public FunctionCallbackProvider weatherTools(WeatherService weatherService) {\n        return FunctionCallbackProvider.builder()\n            .function(\"get_forecast\", weatherService::getWeatherForecast)\n            .function(\"get_alerts\", weatherService::getAlerts)\n            .build();\n    }\n}\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#building-and-running","title":"Building and running","text":"<p>Build your server:</p> WindowsmacOS/Linux <pre><code>.\\mvnw clean package\n</code></pre> <pre><code>./mvnw clean package\n</code></pre> <p>This will generate a <code>weather-mcp-0.0.1-SNAPSHOT.jar</code> file in the <code>target</code> folder.</p>"},{"location":"hands-on/mcp-server-starter/#kotlin-system-requirements","title":"Kotlin System requirements","text":"<ul> <li>Java 17 or higher installed</li> <li>Kotlin 1.8+ support</li> </ul>"},{"location":"hands-on/mcp-server-starter/#set-up-your-environment_3","title":"Set up your environment","text":"WindowsmacOS/Linux <pre><code># Create a new directory for our project\nmkdir weather-mcp\ncd weather-mcp\n\n# Initialize a new kotlin project with Gradle\ngradle init --type kotlin-application\n</code></pre> <pre><code># Create a new directory for our project\nmkdir weather-mcp\ncd weather-mcp\n\n# Initialize a new kotlin project with Gradle\ngradle init --type kotlin-application\n</code></pre> <p>After running <code>gradle init</code>, select Application as the project type and Kotlin as the programming language.</p> <p>Add the following dependencies to your <code>build.gradle.kts</code>:</p> <pre><code>val mcpVersion = \"0.4.0\"\nval slf4jVersion = \"2.0.9\"\nval ktorVersion = \"3.1.1\"\n\ndependencies {\n    implementation(\"io.modelcontextprotocol:kotlin-sdk:$mcpVersion\")\n    implementation(\"org.slf4j:slf4j-nop:$slf4jVersion\")\n    implementation(\"io.ktor:ktor-client-core:$ktorVersion\")\n    implementation(\"io.ktor:ktor-client-cio:$ktorVersion\")\n    implementation(\"io.ktor:ktor-client-content-negotiation:$ktorVersion\")\n    implementation(\"io.ktor:ktor-serialization-kotlinx-json:$ktorVersion\")\n}\n\nplugins {\n    kotlin(\"plugin.serialization\") version \"1.9.10\"\n    id(\"com.github.johnrengelman.shadow\") version \"8.1.1\"\n}\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#building-your-server_3","title":"Building your server","text":"<p>Create <code>src/main/kotlin/WeatherServer.kt</code>:</p> <pre><code>import io.ktor.client.*\nimport io.ktor.client.call.*\nimport io.ktor.client.engine.cio.*\nimport io.ktor.client.plugins.contentnegotiation.*\nimport io.ktor.client.request.*\nimport io.ktor.http.*\nimport io.ktor.serialization.kotlinx.json.*\nimport kotlinx.coroutines.*\nimport kotlinx.serialization.*\nimport kotlinx.serialization.json.*\nimport io.modelcontextprotocol.kotlin.sdk.server.*\nimport io.modelcontextprotocol.kotlin.sdk.shared.*\n\n@Serializable\ndata class Points(\n    val properties: Properties\n) {\n    @Serializable\n    data class Properties(val forecast: String)\n}\n\n@Serializable\ndata class Forecast(\n    val properties: Properties\n) {\n    @Serializable\n    data class Properties(val periods: List&lt;Period&gt;)\n\n    @Serializable\n    data class Period(\n        val name: String,\n        val temperature: Int,\n        val temperatureUnit: String,\n        val windSpeed: String,\n        val windDirection: String,\n        val detailedForecast: String,\n    )\n}\n\n@Serializable\ndata class Alert(\n    val features: List&lt;Feature&gt;\n) {\n    @Serializable\n    data class Feature(val properties: Properties)\n\n    @Serializable\n    data class Properties(\n        val event: String,\n        val areaDesc: String,\n        val severity: String,\n        val description: String,\n        val instruction: String?,\n    )\n}\n\nclass WeatherServer {\n    private val httpClient = HttpClient(CIO) {\n        defaultRequest {\n            url(\"https://api.weather.gov\")\n            headers {\n                append(\"Accept\", \"application/geo+json\")\n                append(\"User-Agent\", \"WeatherApiClient/1.0\")\n            }\n        }\n        install(ContentNegotiation) {\n            json(Json { ignoreUnknownKeys = true })\n        }\n    }\n\n    suspend fun getForecast(latitude: Double, longitude: Double): List&lt;String&gt; {\n        val points = httpClient.get(\"/points/$latitude,$longitude\").body&lt;Points&gt;()\n        val forecast = httpClient.get(points.properties.forecast).body&lt;Forecast&gt;()\n        return forecast.properties.periods.take(5).map { period -&gt;\n            \"\"\"\n            ${period.name}:\n            Temperature: ${period.temperature}\u00b0${period.temperatureUnit}\n            Wind: ${period.windSpeed} ${period.windDirection}\n            Forecast: ${period.detailedForecast}\n            \"\"\".trimIndent()\n        }\n    }\n\n    suspend fun getAlerts(state: String): List&lt;String&gt; {\n        val alerts = httpClient.get(\"/alerts/active/area/$state\").body&lt;Alert&gt;()\n        return alerts.features.map { feature -&gt;\n            \"\"\"\n            Event: ${feature.properties.event}\n            Area: ${feature.properties.areaDesc}\n            Severity: ${feature.properties.severity}\n            Description: ${feature.properties.description}\n            Instructions: ${feature.properties.instruction ?: \"No instructions provided\"}\n            \"\"\".trimIndent()\n        }\n    }\n\n    fun run() {\n        val server = McpServer(\n            ServerInfo(name = \"weather\", version = \"1.0.0\"),\n            ServerCapabilities(tools = ServerCapabilities.Tools())\n        )\n\n        // Register get_alerts tool\n        server.addTool(\n            Tool(\n                name = \"get_alerts\",\n                description = \"Get weather alerts for a US state\",\n                inputSchema = Tool.InputSchema(\n                    type = \"object\",\n                    properties = mapOf(\n                        \"state\" to JsonObject(mapOf(\n                            \"type\" to JsonPrimitive(\"string\"),\n                            \"description\" to JsonPrimitive(\"Two-letter US state code (e.g. CA, NY)\")\n                        ))\n                    ),\n                    required = listOf(\"state\")\n                )\n            )\n        ) { request -&gt;\n            val state = request.arguments[\"state\"]?.jsonPrimitive?.content\n            if (state == null) {\n                CallToolResult(content = listOf(TextContent(\"The 'state' parameter is required.\")))\n            } else {\n                runBlocking {\n                    val alerts = getAlerts(state)\n                    CallToolResult(content = alerts.map { TextContent(it) })\n                }\n            }\n        }\n\n        // Register get_forecast tool\n        server.addTool(\n            Tool(\n                name = \"get_forecast\",\n                description = \"Get weather forecast for a location\",\n                inputSchema = Tool.InputSchema(\n                    type = \"object\",\n                    properties = mapOf(\n                        \"latitude\" to JsonObject(mapOf(\"type\" to JsonPrimitive(\"number\"))),\n                        \"longitude\" to JsonObject(mapOf(\"type\" to JsonPrimitive(\"number\")))\n                    ),\n                    required = listOf(\"latitude\", \"longitude\")\n                )\n            )\n        ) { request -&gt;\n            val latitude = request.arguments[\"latitude\"]?.jsonPrimitive?.doubleOrNull\n            val longitude = request.arguments[\"longitude\"]?.jsonPrimitive?.doubleOrNull\n            if (latitude == null || longitude == null) {\n                CallToolResult(content = listOf(TextContent(\"Both 'latitude' and 'longitude' parameters are required.\")))\n            } else {\n                runBlocking {\n                    val forecast = getForecast(latitude, longitude)\n                    CallToolResult(content = forecast.map { TextContent(it) })\n                }\n            }\n        }\n\n        runBlocking {\n            val transport = StdioServerTransport()\n            server.connect(transport)\n            val done = Job()\n            server.onClose { done.complete() }\n            done.join()\n        }\n    }\n}\n\nfun main() {\n    WeatherServer().run()\n}\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#building-and-running_1","title":"Building and running","text":"<p>Build your server:</p> WindowsmacOS/Linux <pre><code>.\\gradlew build\n</code></pre> <pre><code>./gradlew build\n</code></pre> <p>This will generate a JAR file in the <code>build/libs</code> directory.</p>"},{"location":"hands-on/mcp-server-starter/#c-system-requirements","title":"C# System requirements","text":"<ul> <li>.NET 8 SDK or higher installed</li> </ul>"},{"location":"hands-on/mcp-server-starter/#set-up-your-environment_4","title":"Set up your environment","text":"<p>First, verify your .NET installation:</p> WindowsmacOS/Linux <pre><code>dotnet --version\n</code></pre> <pre><code>dotnet --version\n</code></pre> <p>Now, let's create and set up your project:</p> WindowsmacOS/Linux <pre><code># Create a new directory for our project\nmkdir weather-mcp\ncd weather-mcp\n\n# Initialize a new C# project\ndotnet new console\n</code></pre> <pre><code># Create a new directory for our project\nmkdir weather-mcp\ncd weather-mcp\n\n# Initialize a new C# project\ndotnet new console\n</code></pre> <p>Add NuGet packages for the Model Context Protocol SDK:</p> <pre><code># Add the Model Context Protocol SDK NuGet package\ndotnet add package ModelContextProtocol --prerelease\n# Add the .NET Hosting NuGet package\ndotnet add package Microsoft.Extensions.Hosting\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#building-your-server_4","title":"Building your server","text":"<p>Replace the contents of <code>Program.cs</code> with:</p> <pre><code>using Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ModelContextProtocol;\nusing System.Net.Http.Headers;\n\nvar builder = Host.CreateEmptyApplicationBuilder(settings: null);\n\nbuilder.Services.AddMcpServer()\n    .WithStdioServerTransport()\n    .WithToolsFromAssembly();\n\nbuilder.Services.AddSingleton(_ =&gt;\n{\n    var client = new HttpClient() { BaseAddress = new Uri(\"https://api.weather.gov\") };\n    client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue(\"weather-tool\", \"1.0\"));\n    return client;\n});\n\nvar app = builder.Build();\nawait app.RunAsync();\n</code></pre> <p>Create a helper extension class <code>HttpClientExtensions.cs</code>:</p> <pre><code>using System.Text.Json;\n\ninternal static class HttpClientExtensions\n{\n    public static async Task&lt;JsonDocument&gt; ReadJsonDocumentAsync(this HttpClient client, string requestUri)\n    {\n        using var response = await client.GetAsync(requestUri);\n        response.EnsureSuccessStatusCode();\n        return await JsonDocument.ParseAsync(await response.Content.ReadAsStreamAsync());\n    }\n}\n</code></pre> <p>Create a tools class <code>WeatherTools.cs</code>:</p> <pre><code>using ModelContextProtocol.Server;\nusing System.ComponentModel;\nusing System.Globalization;\nusing System.Text.Json;\n\n[McpServerToolType]\npublic static class WeatherTools\n{\n    [McpServerTool, Description(\"Get weather alerts for a US state.\")]\n    public static async Task&lt;string&gt; GetAlerts(\n        HttpClient client,\n        [Description(\"Two-letter US state code (e.g. CA, NY)\")] string state)\n    {\n        using var jsonDocument = await client.ReadJsonDocumentAsync($\"/alerts/active/area/{state}\");\n        var alerts = jsonDocument.RootElement.GetProperty(\"features\").EnumerateArray();\n\n        if (!alerts.Any())\n        {\n            return \"No active alerts for this state.\";\n        }\n\n        return string.Join(\"\\n---\\n\", alerts.Select(alert =&gt;\n        {\n            var properties = alert.GetProperty(\"properties\");\n            return $\"\"\"\n                    Event: {properties.GetProperty(\"event\").GetString()}\n                    Area: {properties.GetProperty(\"areaDesc\").GetString()}\n                    Severity: {properties.GetProperty(\"severity\").GetString()}\n                    Description: {properties.GetProperty(\"description\").GetString()}\n                    Instructions: {properties.GetProperty(\"instruction\").GetString()}\n                    \"\"\";\n        }));\n    }\n\n    [McpServerTool, Description(\"Get weather forecast for a location.\")]\n    public static async Task&lt;string&gt; GetForecast(\n        HttpClient client,\n        [Description(\"Latitude of the location.\")] double latitude,\n        [Description(\"Longitude of the location.\")] double longitude)\n    {\n        var pointUrl = string.Create(CultureInfo.InvariantCulture, $\"/points/{latitude},{longitude}\");\n        using var jsonDocument = await client.ReadJsonDocumentAsync(pointUrl);\n        var forecastUrl = jsonDocument.RootElement.GetProperty(\"properties\").GetProperty(\"forecast\").GetString()\n            ?? throw new Exception($\"No forecast URL provided by the API\");\n\n        using var forecastDocument = await client.ReadJsonDocumentAsync(forecastUrl);\n        var periods = forecastDocument.RootElement.GetProperty(\"properties\").GetProperty(\"periods\").EnumerateArray();\n\n        return string.Join(\"\\n---\\n\", periods.Take(5).Select(period =&gt; $\"\"\"\n                {period.GetProperty(\"name\").GetString()}:\n                Temperature: {period.GetProperty(\"temperature\").GetInt32()}\u00b0{period.GetProperty(\"temperatureUnit\").GetString()}\n                Wind: {period.GetProperty(\"windSpeed\").GetString()} {period.GetProperty(\"windDirection\").GetString()}\n                Forecast: {period.GetProperty(\"detailedForecast\").GetString()}\n                \"\"\"));\n    }\n}\n</code></pre>"},{"location":"hands-on/mcp-server-starter/#building-and-running_2","title":"Building and running","text":"<p>Build and run your server:</p> WindowsmacOS/Linux <pre><code>dotnet build\ndotnet run\n</code></pre> <pre><code>dotnet build\ndotnet run\n</code></pre> <p>This will start the server and listen for incoming requests on standard input/output.</p>"},{"location":"hands-on/mcp-server-starter/#testing-your-server-with-vs-code","title":"Testing your server with VS Code","text":"<p>Now let's test your server with VS Code and GitHub Copilot. First, make sure you have VS Code installed with the GitHub Copilot extension enabled.</p>"},{"location":"hands-on/mcp-server-starter/#configure-vs-code-mcp-settings","title":"Configure VS Code MCP Settings","text":"<p>We'll need to configure VS Code to use your MCP server. You have multiple options to add an MCP server in VS Code:</p> <ol> <li>Workspace settings: add a <code>.vscode/mcp.json</code> file in your workspace to configure MCP servers for a workspace and share configurations with team members.</li> <li>User settings: specify the server in your user settings to enable the MCP server across all workspaces.</li> <li>Automatic discovery: enable autodiscovery of MCP servers defined in other tools, such as Claude Desktop.</li> </ol> <p>See official VS Code documentation for more information.</p> <p>For adding an MCP server in your workspace, create a <code>.vscode/mcp.json</code> file in your workspace:</p> PythonTypeScriptJavaKotlinC# WindowsmacOS/Linux <pre><code>{\n  \"servers\": {\n    \"weather\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PARENT\\\\FOLDER\\\\weather-mcp\",\n        \"run\",\n        \"weather.py\"\n      ]\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"servers\": {\n    \"weather\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather-mcp\",\n        \"run\",\n        \"weather.py\"\n      ]\n    }\n  }\n}\n</code></pre> WindowsmacOS/Linux <pre><code>{\n  \"servers\": {\n    \"weather\": {\n      \"command\": \"node\",\n      \"args\": [\"C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PARENT\\\\FOLDER\\\\weather-mcp\\\\build\\\\index.js\"]\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"servers\": {\n    \"weather\": {\n      \"command\": \"node\",\n      \"args\": [\"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather-mcp/build/index.js\"]\n    }\n  }\n}\n</code></pre> WindowsmacOS/Linux <pre><code>{\n  \"servers\": {\n    \"weather\": {\n      \"command\": \"java\",\n      \"args\": [\n        \"-jar\",\n        \"C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PARENT\\\\FOLDER\\\\weather-mcp\\\\target\\\\weather-mcp-0.0.1-SNAPSHOT.jar\"\n      ]\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"servers\": {\n    \"weather\": {\n      \"command\": \"java\",\n      \"args\": [\n        \"-jar\",\n        \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather-mcp/target/weather-mcp-0.0.1-SNAPSHOT.jar\"\n      ]\n    }\n  }\n}\n</code></pre> WindowsmacOS/Linux <pre><code>{\n  \"servers\": {\n    \"weather\": {\n      \"command\": \"java\",\n      \"args\": [\n        \"-jar\",\n        \"C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PARENT\\\\FOLDER\\\\weather-mcp\\\\build\\\\libs\\\\weather-mcp-all.jar\"\n      ]\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"servers\": {\n    \"weather\": {\n      \"command\": \"java\",\n      \"args\": [\n        \"-jar\",\n        \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather-mcp/build/libs/weather-mcp-all.jar\"\n      ]\n    }\n  }\n}\n</code></pre> WindowsmacOS/Linux <pre><code>{\n  \"servers\": {\n    \"weather\": {\n      \"command\": \"dotnet\",\n      \"args\": [\n        \"run\",\n        \"--project\",\n        \"C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PARENT\\\\FOLDER\\\\weather-mcp\",\n        \"--no-build\"\n      ]\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"servers\": {\n    \"weather\": {\n      \"command\": \"dotnet\",\n      \"args\": [\n        \"run\",\n        \"--project\",\n        \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather-mcp\",\n        \"--no-build\"\n      ]\n    }\n  }\n}\n</code></pre> <p>Absolute Paths Required</p> <p>Make sure you use absolute paths to your server. Relative paths may not work correctly with MCP server configuration. For more information about the configuration, take a look at the documentation.</p> <p>To configure an MCP server for all your workspaces, you can add the server configuration to your user settings. This allows you to reuse the same server configuration across multiple projects.</p> <p>Specify the server in the VS Code user settings to enable the MCP server across all workspaces. Click the button below to open that settings:</p> <p>VS Code MCP User Settings</p>"},{"location":"hands-on/mcp-server-starter/#starting-the-mcp-server","title":"Starting the MCP Server","text":"<ol> <li>Open the <code>.vscode/mcp.json</code> file</li> <li>Click the \"Start\" button that appears when you open the MCP configuration file: </li> <li>This will start your MCP servers and make them available to GitHub Copilot</li> </ol>"},{"location":"hands-on/mcp-server-starter/#test-with-github-copilot","title":"Test with GitHub Copilot","text":"<p>Once your MCP server is running, you can test it with GitHub Copilot:</p> <ol> <li>Open GitHub Copilot Chat in VS Code</li> <li>Click on the tools button in the input panel: </li> <li>Enable your weather MCP server tools: </li> <li>Test your server with queries like:</li> <li>\"What's the weather forecast for Sacramento, CA (latitude 38.7816, longitude -121.4944)?\"</li> <li>\"What are the active weather alerts in Texas?\"</li> </ol>"},{"location":"hands-on/mcp-server-starter/#whats-happening-under-the-hood","title":"What's happening under the hood","text":"<p>When you ask a weather question like the example below:</p> <p></p> <ol> <li>VS Code sends your question to GitHub Copilot</li> <li>GitHub Copilot analyzes the available MCP tools and decides which one(s) to use</li> <li>VS Code executes the chosen tool(s) through your MCP server</li> <li>The results are sent back to GitHub Copilot</li> <li>GitHub Copilot formulates a natural language response</li> <li>The response is displayed to you in VS Code!</li> </ol> <p></p>"},{"location":"hands-on/mcp-server-starter/#troubleshooting","title":"Troubleshooting","text":""},{"location":"hands-on/mcp-server-starter/#mcp-server-issues","title":"MCP Server Issues","text":"<p>Server not showing up in VS Code:</p> <ol> <li>Check your <code>.vscode/mcp.json</code> file syntax</li> <li>Make sure the path to your project is absolute and not relative</li> <li>Verify your server builds and runs without errors (<code>uv run weather.py</code> or <code>npm run build &amp;&amp; node build/index.js</code>)</li> <li>Restart the MCP server from the configuration file</li> </ol> <p>Tool calls failing silently:</p> <ol> <li>Check the VS Code output panel for MCP-related errors</li> <li>Verify your server builds and runs without errors</li> <li>Test your server independently by running it directly</li> <li>Try restarting the MCP server</li> </ol>"},{"location":"hands-on/mcp-server-starter/#weather-api-issues","title":"Weather API Issues","text":"<p>Error: Failed to retrieve grid point data means either:</p> <ol> <li>The coordinates are outside the US</li> <li>The NWS API is having issues</li> <li>You're being rate limited</li> </ol> <p>To Fix:</p> <ul> <li>Verify you're using US coordinates</li> <li>Add a small delay between requests</li> <li>Check the NWS API status page</li> </ul> <p>Error: No active alerts for [STATE]</p> <ul> <li>This isn't an error - it just means there are no current weather alerts for that state. Try a different state or check during severe weather.</li> </ul>"},{"location":"hands-on/mcp-server-starter/#next-steps","title":"Next Steps","text":"<p>Now that you have a working MCP server, here are some ways to extend it:</p> <ul> <li>Enhanced Features<ul> <li>Add more weather data sources (OpenWeatherMap, AccuWeather)</li> <li>Implement caching to reduce API calls</li> <li>Add weather history and trends</li> <li>Include weather maps and radar data</li> </ul> </li> <li>Advanced MCP Concepts<ul> <li>Resources: Add file-like weather data resources</li> <li>Prompts: Create pre-written weather query templates</li> <li>Multiple Tools: Combine weather with other APIs (news, traffic, etc.)</li> </ul> </li> <li>Integration Ideas<ul> <li>Connect to IoT devices for local weather data</li> <li>Integrate with calendar apps for weather-aware scheduling</li> <li>Build weather-based automation workflows</li> <li>Create custom weather dashboards</li> </ul> </li> </ul>"},{"location":"hands-on/mcp-server-starter/#summary","title":"Summary \ud83d\udcdd","text":"<p>In this lab, you've learned how to:</p> <ul> <li>Build MCP servers using Python or TypeScript with the MCP SDK</li> <li>Configure VS Code to work with MCP servers through <code>.vscode/mcp.json</code></li> <li>Integrate with GitHub Copilot to provide custom tools and functionality</li> <li>Handle real-world APIs like the National Weather Service with proper error handling</li> <li>Debug and troubleshoot MCP server issues in VS Code</li> <li>Understand the MCP architecture and how data flows between components</li> </ul> <p>You now have the foundation to build more complex MCP servers that can extend GitHub Copilot's capabilities with any external API or service!</p> <p>For the next demonstration with MCP, you can take a look at HTML Image Gallery Demo.</p> <p>For more information, see the official Model Context Protocol documentation.</p>"},{"location":"hands-on/other-labs/","title":"Other Hands-on Labs \ud83e\udde9","text":"<p>In addition to our featured HTML Image Gallery and Star Wars API labs, the GitHub Copilot workshop includes several other hands-on labs that demonstrate the capabilities of GitHub Copilot across different programming languages and scenarios.</p>"},{"location":"hands-on/other-labs/#available-labs","title":"Available Labs \ud83d\udccb","text":"Name Language Description Length Javascript Calculator HTML/Javascript A small app that serves as a good starter project 20 mins Timer and Selector HTML/CSS/React Building components for workshop trainers 30 mins Polaroid Image Gallery HTML/Javascript Building a small image gallery with animations 45 mins Rock Paper Scissor Python A slightly more advanced app 30 mins Restaurant API + Deployment Python/Azure Creating and deploying a simple API to Azure 45 mins Star Wars API Client Python Creating a library to retrieve Star Wars character data 1 hour Star Wars API Client Java Creating a library to retrieve Star Wars character data 1 hour API Testing with SWAPI C# Implementing tests for an API 30 mins C Sharp Web App C# Working with .NET Web Technologies and unit tests 1 hour Interest Calculator C++ Building an interest calculator with unit tests 30 mins"},{"location":"hands-on/other-labs/#external-lab-resources","title":"External Lab Resources \ud83d\udd17","text":"<p>These labs are hosted in separate repositories. Click on the links below to access them:</p>"},{"location":"hands-on/other-labs/#javascript-calculator","title":"Javascript Calculator \u2797","text":"<p>Duration: 20 minutes Description: A small app provided by GitHub that serves as a good starter project for beginners. Link: Instructions</p>"},{"location":"hands-on/other-labs/#rock-paper-scissors","title":"Rock Paper Scissors \u2702\ufe0f","text":"<p>Duration: 45 minutes Description: A slightly more advanced app provided by GitHub that demonstrates more complex interactions. Link: Instructions</p>"},{"location":"hands-on/other-labs/#restaurant-api-deployment","title":"Restaurant API + Deployment \ud83c\udf7d\ufe0f","text":"<p>Duration: 45 minutes Description: Create a simple API and deploy it to Azure Container Apps. Link: Instructions</p>"},{"location":"hands-on/other-labs/#c-sharp-web-app","title":"C Sharp Web App \ud83c\udf10","text":"<p>Duration: 1 hour Description: GitHub Copilot repository for the Business Hackathon with .NET Web Technologies (C# ASP.NET / Blazor and Unittests). Link: Instructions QR Code: </p>"},{"location":"hands-on/other-labs/#timer-and-selector","title":"Timer and Selector \u23f1\ufe0f","text":"<p>Duration: 30 minutes Description: Build a website for trainers that includes components like a timer for breaks and a selector for choosing participants. Link: Instructions QR Code: </p>"},{"location":"hands-on/other-labs/#interest-calculator","title":"Interest Calculator \ud83d\udcb0","text":"<p>Duration: 30 minutes Description: Build an interest calculator together with a unit test in C++. Link: Instructions QR Code: </p>"},{"location":"hands-on/other-labs/#api-testing-with-swapi","title":"API Testing with SWAPI \ud83e\uddea","text":"<p>Duration: 30 minutes Description: Implement tests to test the Star Wars API. Link: Instructions QR Code: </p>"},{"location":"hands-on/other-labs/#how-to-choose-a-lab","title":"How to Choose a Lab \ud83e\udd14","text":"<p>When selecting a lab for your workshop, consider:</p> <ol> <li>Audience Experience Level: Choose labs that match the programming experience of your participants</li> <li>Available Time: Select labs that fit within your workshop timeframe</li> <li>Programming Language Preference: Pick labs that use languages familiar to your audience</li> <li>Learning Objectives: Select labs that demonstrate the specific GitHub Copilot features you want to highlight</li> </ol>"},{"location":"hands-on/other-labs/#tips-for-running-labs-successfully","title":"Tips for Running Labs Successfully \ud83d\udca1","text":"<ol> <li>Pre-workshop Setup: Ensure all participants have GitHub Copilot access before the workshop</li> <li>Environment Check: Verify that participants have the necessary development environments set up</li> <li>Pair Programming: Consider having participants work in pairs for more collaborative learning</li> <li>Time Management: Set clear timeboxes for each section of the lab</li> <li>Checkpoints: Establish checkpoints throughout the lab to ensure everyone is progressing</li> <li>Assistance: Have additional facilitators available to help participants who get stuck</li> <li>Wrap-up Discussion: After each lab, discuss what was learned and how GitHub Copilot helped</li> </ol> <p>Happy coding with GitHub Copilot! \ud83d\ude80</p>"},{"location":"hands-on/rock_paper_scissors/","title":"Rock Paper Scissors: Game Simulation \ud83c\udfc6","text":"<p>In this hands-on lab, you'll build a Python implementation of a classic Rock Paper Scissors game between two players with the help of GitHub Copilot! This lab demonstrates how GitHub Copilot can assist with creating game logic, scoring systems, and user interfaces.</p>"},{"location":"hands-on/rock_paper_scissors/#lab-overview","title":"Lab Overview \ud83d\udccb","text":"<p>Duration: 30-45 Minutes Difficulty: Beginner to Intermediate Prerequisites:</p> <ul> <li>Basic knowledge of Python and console applications</li> <li>Python 3.8+: Download Python</li> <li>pip package manager (included with Python)</li> </ul>"},{"location":"hands-on/rock_paper_scissors/#what-youll-build","title":"What You'll Build \ud83c\udfd7\ufe0f","text":"<p>A Python console application that simulates a Rock Paper Scissors match with the following components:</p> <ul> <li>Game logic for rock, paper, scissors</li> <li>Scoring system based on the winning move</li> <li>Round-by-round simulation of the match</li> <li>Optional advanced features like hints and player move selection</li> </ul>"},{"location":"hands-on/rock_paper_scissors/#getting-started","title":"Getting Started \ud83d\ude80","text":""},{"location":"hands-on/rock_paper_scissors/#step-1-set-up-the-project-structure","title":"Step 1: Set Up the Project Structure","text":"<p>We'll start by setting up a basic Python project structure. GitHub Copilot will help us create the necessary files and configurations.</p> <p>Copilot Tip</p> <p>You can ask Github Copilot Chat to provide you with the steps to create a Python based project with a prompt like: <code>How can I create a Python based project, where I need one file for the game and another file for the testing?</code></p> <p>You can use <code>@workspace</code> agent to </p> <p>Let's set up our project directory. Create an empty folder and navigate to it via terminal.</p> <pre><code>mkdir rock_paper_scissors\ncd rock_paper_scissors\n</code></pre> Optionally, you can create a virtual environment and activate it. <pre><code>python -m venv venv\n# For Windows\nvenv\\Scripts\\activate\n# For macOS/Linux\n# source venv/bin/activate\n</code></pre> <p>A sample project structure could look like this: <pre><code>rock_paper_scissors/\n\u251c\u2500\u2500 game.py\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 test_game.py\n</code></pre></p>"},{"location":"hands-on/rock_paper_scissors/#step-2-create-the-game-file-step-by-step","title":"Step 2: Create the Game File - Step by Step","text":"<p>Let's start by creating a single file that contains all the game logic, scoring system, and main application. We'll build this incrementally, introducing GitHub Copilot features along the way.</p> <p>First, create a new file called <code>game.py</code> in your project directory and open the file in your editor.</p> <p>Copilot Tip</p> <p>Start with a comment describing what you want to build, and GitHub Copilot will suggest code based on your description. After typing the comment, press Enter, and Copilot may suggest some initial code.</p> <p>Let's first create the basic structure for our game by implementing a class, which will include all helpful functions. Try typing the following comment: <code># Class that represents the scorer of the game</code>. </p> <p>You should have the following output in your IDE:</p> <pre><code># Rock Paper Scissors game implementation\n\n# Class that represents the scorer of the game \nclass Scorer:\n</code></pre>"},{"location":"hands-on/rock_paper_scissors/#implementing-the-scorer-class","title":"Implementing the Scorer Class","text":"<p>Now let's implement the constructor for our <code>Scorer</code> class.  </p> <p>Start typing the following comment and press Tab to accept Copilot's suggestion: <code>initialize the scorer with two player scores</code>.</p> <p>Sample Result</p> <pre><code># Class that represents the scorer of the game\nclass Scorer:\n\n    # initialize the scorer with two player scores\n    def __init__(self):\n        self.player1_score = 0\n        self.player2_score = 0\n</code></pre> <p>Before implementing a method to update scores, let's implement a method to calculate scores for different winner moves. Again, use comments to guide Copilot:</p> <p>Copilot Tip</p> <p>Add a comment describing what the method should do, and Copilot will suggest an implementation. Try typing <code># method to calculate points for the winning move</code>.</p> <p>After receiving Copilot's suggestion, your code should now include something like the following.</p> <p>Sample Result</p> <pre><code># method to calculate points for the winning move\n    def calculate_points(self, move):\n        if move == \"rock\":\n            return 1\n        elif move == \"paper\":\n            return 2\n        elif move == \"scissors\":\n            return 3\n        else:\n            print(\"Invalid move\")\n            return 0\n</code></pre> <p>Now, let's implement a function to update the scores based on the winner and the move. Try adding the following comment: <code># Method to update the score based on the winner and the move</code></p> <p>After typing this, Copilot should suggest the method body. Accept the suggestion by pressing Tab.</p> <p>Sample Result</p> <pre><code># Method to update the score based on the winner and the move\n    def update_score(self, winner, move):\n        points = self.calculate_points(move)\n        if winner == \"player1\":\n            self.player1_score += points\n        elif winner == \"player2\":\n            self.player2_score += points\n        else:\n            print(\"Invalid winner\")\n</code></pre> <p>Let's add methods to get the final scores and determine the winner. For this, we'll use Copilot's ability to generate code based on function names.</p> <p>Simply type the method name and signature, and Copilot will suggest the implementation. Try typing: <code>def get_final_scores(self):</code></p> Sample result: <pre><code>def get_final_scores(self):\n    return self.player1_score, self.player2_score\n</code></pre> <p>You can use the same way to implement a function to determine the winner. Try typing: <code>def get_winner(self):</code></p> Sample result: <pre><code>def get_winner(self):\n        if self.player1_score &gt; self.player2_score:\n            return \"Player 1 wins!\"\n        elif self.player2_score &gt; self.player1_score:\n            return \"Player 2 wins!\"\n        else:\n            return \"It's a tie!\"\n</code></pre>"},{"location":"hands-on/rock_paper_scissors/#adding-the-game-logic-function","title":"Adding the Game Logic Function","text":"<p>Now let's implement the core game logic with a function to determine the winner of a specific round.</p> <p>After the <code>Scorer</code> class, add a comment and let Copilot suggest the function. Try typing: <code># Function to determine the winner of a rock paper scissors round</code></p> <p>Copilot should suggest a function, accept and review it.</p> Sample Result: <pre><code># Function to determine the winner of a rock paper scissors round\ndef determine_winner(player1_move, player2_move):\n    if player1_move == player2_move:\n        return \"tie\"\n    elif (player1_move == \"rock\" and player2_move == \"scissors\") or \\\n        (player1_move == \"paper\" and player2_move == \"rock\") or \\\n        (player1_move == \"scissors\" and player2_move == \"paper\"):\n        return \"player1\"\n    else:\n        return \"player2\"\n</code></pre>"},{"location":"hands-on/rock_paper_scissors/#implementing-the-main-game-loop","title":"Implementing the Main Game Loop","text":"<p>Finally, let's implement the main game loop that simulates the match:</p> <p>Copilot Tip</p> <p>For longer functions like the main game loop, you can give Copilot more detailed instructions using comments. Try typing <code>def main():</code> to receive code recommendations, if Copilot suggests more comments.  <pre><code># Main function to simulate a 5-round match between Player 1 and Player 2 with predefined moves and score tracking\n# Print out detailed texts, results of each round and the final scores\n</code></pre></p> <p>Start implementing the <code>main</code> function. Here are the predefined moves for the both players: <pre><code># player1_moves = ['scissors', 'paper', 'scissors', 'rock', 'rock']\n# player2_moves = ['rock', 'rock', 'paper', 'scissors', 'paper']\n</code></pre></p> <p>Copilot Tip</p> <p>If you are not satisfied with the overall suggestion of the main function, you can try to modify the comment you have provided.</p> <p>Or, you can press <code>Strg</code> and then right arrow to only accept word by word.</p> <p>Accept Copilot's suggestion for the implementation. It should provide something like the following.</p> Sample result: <pre><code># Main function to simulate a 5-round match between Player 1 and Player 2 with predefined moves and score tracking\n# Print out detailed texts, results of each round and the final scores\n# predifned moves for Player 1 and Player 2:\n# player1_moves = ['scissors', 'paper', 'scissors', 'rock', 'rock']\n# player2_moves = ['rock', 'rock', 'paper', 'scissors', 'paper']\ndef main():\n    player1_moves = ['scissors', 'paper', 'scissors', 'rock', 'rock']\n    player2_moves = ['rock', 'rock', 'paper', 'scissors', 'paper']\n\n    scorer = Scorer()\n\n    for i in range(5):\n        player1_move = player1_moves[i]\n        player2_move = player2_moves[i]\n\n        print(f\"Round {i + 1}:\")\n        print(f\"Player 1 plays: {player1_move}\")\n        print(f\"Player 2 plays: {player2_move}\")\n\n        winner = determine_winner(player1_move, player2_move)\n\n        if winner == \"tie\":\n            print(\"It's a tie!\")\n        else:\n            print(f\"{winner} wins this round!\")\n            scorer.update_score(winner, player1_move if winner == \"player1\" else player2_move)\n            initial_scores = scorer.get_final_scores()\n            print(f\"Initial Scores: Player 1: {initial_scores[0]}, Player 2: {initial_scores[1]}\")\n\n        print(\"-\" * 30)\n\n    final_scores = scorer.get_final_scores()\n    print(f\"Final Scores: Player 1: {final_scores[0]}, Player 2: {final_scores[1]}\")\n    print(scorer.get_winner())\n</code></pre>"},{"location":"hands-on/rock_paper_scissors/#adding-the-entry-point","title":"Adding the Entry Point","text":"<p>Finally, let's add the entry point to our script:</p> <p>Copilot Tip</p> <p>For standard Python idioms like the entry point, Copilot often needs minimal prompting. Try typing:  <pre><code>if __name__ == \"__main__\":\n</code></pre></p> <p>At this point, your complete <code>game.py</code> should look something like the following:</p> Complete <code>game.py</code> <pre><code># Rock Paper Scissors Game\n\n# Class that represents the scorer of the game\nclass Scorer:\n\n    # initialize the scorer with two player scores\n    def __init__(self):\n        self.player1_score = 0\n        self.player2_score = 0\n\n    # method to calculate points for the winning move\n    def calculate_points(self, move):\n        if move == \"rock\":\n            return 1\n        elif move == \"paper\":\n            return 2\n        elif move == \"scissors\":\n            return 3\n        else:\n            print(\"Invalid move\")\n            return 0\n\n    # Method to update the score based on the winner and the move\n    def update_score(self, winner, move):\n        points = self.calculate_points(move)\n        if winner == \"player1\":\n            self.player1_score += points\n        elif winner == \"player2\":\n            self.player2_score += points\n        else:\n            print(\"Invalid winner\")\n\n    def get_final_scores(self):\n        return self.player1_score, self.player2_score\n\n    def get_winner(self):\n        if self.player1_score &gt; self.player2_score:\n            return \"Player 1 wins!\"\n        elif self.player2_score &gt; self.player1_score:\n            return \"Player 2 wins!\"\n        else:\n            return \"It's a tie!\"\n\n# Function to determine the winner of a rock paper scissors round\ndef determine_winner(player1_move, player2_move):\n    if player1_move == player2_move:\n        return \"tie\"\n    elif (player1_move == \"rock\" and player2_move == \"scissors\") or \\\n        (player1_move == \"paper\" and player2_move == \"rock\") or \\\n        (player1_move == \"scissors\" and player2_move == \"paper\"):\n        return \"player1\"\n    else:\n        return \"player2\"\n\n# Main function to simulate a 5-round match between Player 1 and Player 2 with predefined moves and score tracking\n# Print out detailed texts, results of each round and the final scores\n# predifned moves for Player 1 and Player 2:\n# player1_moves = ['scissors', 'paper', 'scissors', 'rock', 'rock']\n# player2_moves = ['rock', 'rock', 'paper', 'scissors', 'paper']\ndef main():\n    player1_moves = ['scissors', 'paper', 'scissors', 'rock', 'rock']\n    player2_moves = ['rock', 'rock', 'paper', 'scissors', 'paper']\n\n    scorer = Scorer()\n\n    for i in range(5):\n        player1_move = player1_moves[i]\n        player2_move = player2_moves[i]\n\n        print(f\"Round {i + 1}:\")\n        print(f\"Player 1 plays: {player1_move}\")\n        print(f\"Player 2 plays: {player2_move}\")\n\n        winner = determine_winner(player1_move, player2_move)\n\n        if winner == \"tie\":\n            print(\"It's a tie!\")\n        else:\n            print(f\"{winner} wins this round!\")\n            scorer.update_score(winner, player1_move if winner == \"player1\" else player2_move)\n            initial_scores = scorer.get_final_scores()\n            print(f\"Initial Scores: Player 1: {initial_scores[0]}, Player 2: {initial_scores[1]}\")\n\n        print(\"-\" * 30)\n\n    final_scores = scorer.get_final_scores()\n    print(f\"Final Scores: Player 1: {final_scores[0]}, Player 2: {final_scores[1]}\")\n    print(scorer.get_winner())\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"hands-on/rock_paper_scissors/#step-3-create-a-test-file-step-by-step","title":"Step 3: Create a Test File - Step by Step","text":"<p>Now let's create a test file to verify our game logic. We'll build this incrementally as well.</p> <p>First, create a tests directory and a test file. A sample project structure could look like this: <pre><code>rock_paper_scissors/\n\u251c\u2500\u2500 game.py\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 test_game.py\n</code></pre></p>"},{"location":"hands-on/rock_paper_scissors/#setting-up-the-test-structure","title":"Setting Up the Test Structure","text":"<p>Open <code>tests/test_game.py</code> in your editor and let's start by setting up the test structure:</p> <p>Copilot Tip</p> <p>Start by typing a comment describing what the file is for, then import statements. Try typing:  <code># Tests for the Rock Paper Scissors game</code></p> <p>Copilot should suggest importing your game module.</p> Sample import structure <pre><code># Tests for the Rock Paper Scissors game\nimport unittest\nfrom game import Scorer, determine_winner\n</code></pre>"},{"location":"hands-on/rock_paper_scissors/#creating-the-test-file","title":"Creating the Test File","text":"<p>Now let's create a test class structure:</p> <p>Type the class definition and Copilot will suggest the methods. Try typing: <code># Test class for the Scorer class</code></p> Sample test class structure <pre><code># Test class for the Scorer class\nclass TestGame(unittest.TestCase):\n</code></pre> <p>Let's add our first test method to test the <code>determine_winner</code> function. </p> <p>Use Copilot to generate test cases by either typing a comment beforehand, or by typing the method name.</p> <p>Accept Copilot's suggestions for the test cases, and make sure the tests align with your game implementation.</p> Sample test method for <code>determine_winner</code> <pre><code># test the determine_winner function\n    def test_determine_winner(self):\n        self.assertEqual(determine_winner(\"rock\", \"scissors\"), \"player1\")\n        self.assertEqual(determine_winner(\"paper\", \"rock\"), \"player1\")\n        self.assertEqual(determine_winner(\"scissors\", \"paper\"), \"player1\")\n\n        self.assertEqual(determine_winner(\"rock\", \"paper\"), \"player2\")\n        self.assertEqual(determine_winner(\"paper\", \"scissors\"), \"player2\")\n        self.assertEqual(determine_winner(\"scissors\", \"rock\"), \"player2\")\n\n        self.assertEqual(determine_winner(\"rock\", \"rock\"), \"tie\")\n        self.assertEqual(determine_winner(\"paper\", \"paper\"), \"tie\")\n        self.assertEqual(determine_winner(\"scissors\", \"scissors\"), \"tie\")\n</code></pre> <p>Now let's add a test method for the <code>Scorer</code> class.</p> <p>Copilot Tip</p> <p>For more complex test cases, you can use Copilot's <code>/tests</code> command leveraging the inline chat function.</p> <p>In the editor, press Ctrl+I to open the inline chat and type: <code>/tests Write test cases for the Scorer class to verify point calculation and score updates</code></p> <p>The GHCP inline chat looks like below:</p> <p></p> <p>You can iterate to get a better result, ask to fix a code that you have written, or even ask to understand a unclear code snippet. Explore pre-written prompts by typing <code>/</code>, e.g. <code>/tests</code>.</p> <p>After receiving Copilot's suggestions, you can adapt them to your code. </p> <p>Your test method for the scorer class can look below.</p> Sample tests for the scorer class <pre><code># used inline GHCP chat with the following prompt:\n    # /tests Write test cases for the Scorer class to verify point calculation and score updates\n    def test_calculate_points(self):\n        scorer = Scorer()\n        self.assertEqual(scorer.calculate_points(\"rock\"), 1)\n        self.assertEqual(scorer.calculate_points(\"paper\"), 2)\n        self.assertEqual(scorer.calculate_points(\"scissors\"), 3)\n        self.assertEqual(scorer.calculate_points(\"invalid\"), 0)\n\n    def test_update_score_player1(self):\n        scorer = Scorer()\n        scorer.update_score(\"player1\", \"rock\")\n        self.assertEqual(scorer.player1_score, 1)\n        self.assertEqual(scorer.player2_score, 0)\n        scorer.update_score(\"player1\", \"paper\")\n        self.assertEqual(scorer.player1_score, 3)\n        self.assertEqual(scorer.player2_score, 0)\n\n    def test_update_score_player2(self):\n        scorer = Scorer()\n        scorer.update_score(\"player2\", \"scissors\")\n        self.assertEqual(scorer.player1_score, 0)\n        self.assertEqual(scorer.player2_score, 3)\n        scorer.update_score(\"player2\", \"rock\")\n        self.assertEqual(scorer.player1_score, 0)\n        self.assertEqual(scorer.player2_score, 4)\n\n    def test_update_score_invalid(self):\n        scorer = Scorer()\n        scorer.update_score(\"invalid\", \"rock\")\n        self.assertEqual(scorer.player1_score, 0)\n        self.assertEqual(scorer.player2_score, 0)\n\n    def test_get_final_scores(self):\n        scorer = Scorer()\n        scorer.update_score(\"player1\", \"rock\")\n        scorer.update_score(\"player2\", \"paper\")\n        self.assertEqual(scorer.get_final_scores(), (1, 2))\n\n    def test_get_winner(self):\n        scorer = Scorer()\n        scorer.update_score(\"player1\", \"rock\")  # 1\n        scorer.update_score(\"player2\", \"paper\") # 2\n        self.assertEqual(scorer.get_winner(), \"Player 2 wins!\")\n        scorer.update_score(\"player1\", \"scissors\") # +3, total 4\n        self.assertEqual(scorer.get_winner(), \"Player 1 wins!\")\n        scorer = Scorer()\n        self.assertEqual(scorer.get_winner(), \"It's a tie!\")\n</code></pre> <p>Finally, let's add the code to run the tests:</p> <p>Complete the file with:</p> <pre><code>if __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>At this point, your complete <code>test_game.py</code> can look like this:</p> Sample <code>test_game.py</code> <pre><code># Tests for the Rock Paper Scissors game\nimport unittest\nfrom game import Scorer, determine_winner\n\n# Test class for the Scorer class\nclass TestGame(unittest.TestCase):\n\n    # test the determine_winner function\n    def test_determine_winner(self):\n        self.assertEqual(determine_winner(\"rock\", \"scissors\"), \"player1\")\n        self.assertEqual(determine_winner(\"paper\", \"rock\"), \"player1\")\n        self.assertEqual(determine_winner(\"scissors\", \"paper\"), \"player1\")\n        self.assertEqual(determine_winner(\"rock\", \"paper\"), \"player2\")\n        self.assertEqual(determine_winner(\"paper\", \"scissors\"), \"player2\")\n        self.assertEqual(determine_winner(\"scissors\", \"rock\"), \"player2\")\n        self.assertEqual(determine_winner(\"rock\", \"rock\"), \"tie\")\n        self.assertEqual(determine_winner(\"paper\", \"paper\"), \"tie\")\n        self.assertEqual(determine_winner(\"scissors\", \"scissors\"), \"tie\")\n\n    # used inline GHCP chat with the following prompt:\n    # /tests Write test cases for the Scorer class to verify point calculation and score updates\n    def test_calculate_points(self):\n        scorer = Scorer()\n        self.assertEqual(scorer.calculate_points(\"rock\"), 1)\n        self.assertEqual(scorer.calculate_points(\"paper\"), 2)\n        self.assertEqual(scorer.calculate_points(\"scissors\"), 3)\n        self.assertEqual(scorer.calculate_points(\"invalid\"), 0)\n\n    def test_update_score_player1(self):\n        scorer = Scorer()\n        scorer.update_score(\"player1\", \"rock\")\n        self.assertEqual(scorer.player1_score, 1)\n        self.assertEqual(scorer.player2_score, 0)\n        scorer.update_score(\"player1\", \"paper\")\n        self.assertEqual(scorer.player1_score, 3)\n        self.assertEqual(scorer.player2_score, 0)\n\n    def test_update_score_player2(self):\n        scorer = Scorer()\n        scorer.update_score(\"player2\", \"scissors\")\n        self.assertEqual(scorer.player1_score, 0)\n        self.assertEqual(scorer.player2_score, 3)\n        scorer.update_score(\"player2\", \"rock\")\n        self.assertEqual(scorer.player1_score, 0)\n        self.assertEqual(scorer.player2_score, 4)\n\n    def test_update_score_invalid(self):\n        scorer = Scorer()\n        scorer.update_score(\"invalid\", \"rock\")\n        self.assertEqual(scorer.player1_score, 0)\n        self.assertEqual(scorer.player2_score, 0)\n\n    def test_get_final_scores(self):\n        scorer = Scorer()\n        scorer.update_score(\"player1\", \"rock\")\n        scorer.update_score(\"player2\", \"paper\")\n        self.assertEqual(scorer.get_final_scores(), (1, 2))\n\n    def test_get_winner(self):\n        scorer = Scorer()\n        scorer.update_score(\"player1\", \"rock\")  # 1\n        scorer.update_score(\"player2\", \"paper\") # 2\n        self.assertEqual(scorer.get_winner(), \"Player 2 wins!\")\n        scorer.update_score(\"player1\", \"scissors\") # +3, total 4\n        self.assertEqual(scorer.get_winner(), \"Player 1 wins!\")\n        scorer = Scorer()\n        self.assertEqual(scorer.get_winner(), \"It's a tie!\")\n\n\n\n# main function to run the tests\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>"},{"location":"hands-on/rock_paper_scissors/#running-the-tests","title":"Running the Tests","text":"<p>Now let's run the tests to verify that our game logic is working correctly.</p> <p>In your game folder, run the following command.</p> <p>!!! \"Run the tests with these command:\"     <pre><code>python -m unittest discover tests\n</code></pre></p> <p>If all tests pass, you should see output similar to: <pre><code>.....\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nOK\n</code></pre></p>"},{"location":"hands-on/rock_paper_scissors/#step-4-run-the-game","title":"Step 4: Run the Game","text":"<p>Now, let's run the game to see the simulation in action:</p> <pre><code>python game.py\n</code></pre>"},{"location":"hands-on/rock_paper_scissors/#step-5-advanced-features-optional","title":"Step 5: Advanced Features (Optional)","text":"<p>If you have time, try implementing these advanced features:</p> <p>Copilot Tip</p> <p>Ask Github Copilot to help you implement these advanced features by describing what you want to achieve.</p> <ol> <li> <p>Hint System: Add a hint system that suggests a move to the player</p> </li> <li> <p>Player Input: Allow players to select their moves for each round</p> </li> <li> <p>GUI Interface: Create a simple graphical interface using a library like Pygame or Tkinter</p> </li> </ol>"},{"location":"hands-on/rock_paper_scissors/#github-copilot-tips","title":"GitHub Copilot Tips \ud83d\udca1","text":""},{"location":"hands-on/rock_paper_scissors/#use-copilot-to-improve-efficiency","title":"Use Copilot to improve efficiency","text":"<p>See if you can use Copilot to find out the complexity (BigO notation) of the code.</p> <ol> <li> <p>Open the GitHub Copilot Chat view in the sidebar if it's not already open. Make sure your solution file is still open as well.</p> </li> <li> <p>Ask Copilot Chat what the complexity of the code is.</p> </li> <li> <p>Ask Copilot Chat to make the code more efficient.</p> </li> <li> <p>Ask for the complexity again - is it better?</p> </li> </ol>"},{"location":"hands-on/rock_paper_scissors/#use-copilot-to-generate-code-comments","title":"Use Copilot to generate code comments","text":"<ol> <li> <p>Highlight all of the code with Ctrl/Cmd+A.</p> </li> <li> <p>Press Ctrl/Cmd+I to open the inline chat.</p> </li> <li> <p>Type <code>/doc</code></p> </li> <li> <p>Ask Copilot Chat to document the function.</p> </li> </ol>"},{"location":"hands-on/rock_paper_scissors/#use-copilot-to-simplify-your-code","title":"Use Copilot to simplify your code","text":"<ol> <li> <p>Open GitHub Copilot Chat in the sidebar, and ask it to make your code simpler.</p> </li> <li> <p>What did Copilot Chat suggest you do to make it simpler?</p> </li> </ol>"},{"location":"hands-on/rock_paper_scissors/#got-errors","title":"Got Errors?","text":"<p>Copilot Chat can help with that too! Just copy the error message and paste it into Chat. Often that's all Copilot needs to resolve your issue. If you iterate with the Agent Mode, GHCP can also see your error messages in the terminal and directly modify your code accordingly.</p>"},{"location":"hands-on/rock_paper_scissors/#summary","title":"Summary \ud83d\udcdd","text":"<p>In this lab, you've learned how to:</p> <ul> <li>Use GitHub Copilot to create a Rock Paper Scissors game simulation</li> <li>Implement game logic and scoring systems in Python</li> <li>Simulate a multi-round match with predefined moves</li> <li>Determine the winner based on accumulated points</li> <li>Generate tests for the implemented game</li> </ul> <p>GitHub Copilot has helped you write code faster and with less effort, allowing you to focus on the game design rather than the implementation details. This is a great example of how AI-assisted coding can enhance your development workflow! \ud83d\ude80</p>"},{"location":"hands-on/rock_paper_scissors/#bonus-challenges","title":"Bonus Challenges \ud83c\udf1f","text":"<p>If you've completed the lab and want an extra challenge, try:</p> <ol> <li>Implementing different scoring rules</li> <li>Adding more players to the game</li> <li>Creating a tournament system with multiple matches</li> <li>Adding sound effects for each move</li> </ol>"},{"location":"hands-on/starwars-api-python/","title":"Star Wars API Client Lab with Python \ud83d\ude80","text":"<p>In this hands-on lab, you'll build a Python client for the Star Wars API (SWAPI) with the help of GitHub Copilot! This lab demonstrates how GitHub Copilot can assist with creating data classes, abstract base classes, implementations, and tests in Python.</p>"},{"location":"hands-on/starwars-api-python/#lab-overview","title":"Lab Overview \ud83d\udccb","text":"<p>Duration: 1 hour Difficulty: Intermediate Prerequisites:</p> <ul> <li>Basic knowledge of Python, REST APIs, and unit testing  </li> <li>Python 3.8+: Download Python</li> <li>pip package manager (included with Python)</li> </ul>"},{"location":"hands-on/starwars-api-python/#what-youll-build","title":"What You'll Build \ud83c\udfd7\ufe0f","text":"<p>A Python client for the Star Wars API with the following components:</p> <ul> <li>Data Classes to represent Star Wars characters</li> <li>An abstract base class defining the API client methods</li> <li>An implementation of the abstract base class using Python's requests library</li> <li>Unit tests to verify the functionality</li> </ul>"},{"location":"hands-on/starwars-api-python/#getting-started","title":"Getting Started \ud83d\ude80","text":""},{"location":"hands-on/starwars-api-python/#step-1-set-up-the-project-structure","title":"Step 1: Set Up the Project Structure","text":"<p>We'll start by setting up a basic Python project structure. GitHub Copilot will help us create the necessary files and configurations.</p> <p>Copilot Tip</p> <p>You can ask Github Copilot Chat to provide you with the steps to create a Python based project with a prompt like: <code>How can I create a Python based project with unit tests?</code></p> <p>Let's set up our project directory. Create an empty folder and navigate to it via terminal.</p> <pre><code>mkdir starwarsapi-python\ncd starwarsapi-python\n</code></pre> <p>Create a virtual environment and activate it:</p> <pre><code>python -m venv venv\n# For Windows\nvenv\\Scripts\\activate\n# For macOS/Linux\nsource venv/bin/activate\n</code></pre> <p>A sample project structure could look like this: <pre><code>starwarsapi-python/\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u251c\u2500\u2500 star_wars_api.py\n\u2502   \u251c\u2500\u2500 star_wars_api_impl.py\n\u2502   \u2514\u2500\u2500 star_wars_character.py\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 test_star_wars_api.py\n</code></pre></p>"},{"location":"hands-on/starwars-api-python/#step-2-install-required-packages","title":"Step 2: Install Required Packages","text":"<p>Let's create a <code>requirements.txt</code> file with the necessary dependencies.</p> <p>Copilot Tip</p> <p>Ask GitHub Copilot to help you create a requirements.txt file with dependencies for HTTP requests and unit testing.</p> <p>Ensure that the dependency versions align with your project requirements, after using Copilot for creating the dependencies.</p> <p>Your <code>requirements.txt</code> could look something like this:</p> <pre><code>requests==2.31.0\npytest==7.4.0\npytest-cov==4.1.0\n</code></pre> <p>Install the dependencies:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"hands-on/starwars-api-python/#step-3-create-the-data-class-for-star-wars-character","title":"Step 3: Create the Data Class for Star Wars Character","text":"<p>Info</p> <p>This demonstration can be implemented through different methods. Originally, this demonstration is adapted from a Java version, that's why you may notice some Java-inspired structures. Feel free to experiment with different Python approaches and ask GitHub Copilot for suggestions or alternative implementations as you work through the lab.</p> <p>Please navigate in your browser to the Star Wars API and get familiar with the API. We will create a data class to represent a Star Wars Character.</p> <p>Let's start by using Luke Skywalker as an example: https://swapi.info/people/1</p> Please copy the JSON in your clipboard: <pre><code>{  \n    \"name\": \"Luke Skywalker\",\n    \"height\": \"172\",\n    \"mass\": \"77\",\n    \"hair_color\": \"blond\",\n    \"skin_color\": \"fair\",\n    \"eye_color\": \"blue\",\n    \"birth_year\": \"19BBY\",\n    \"gender\": \"male\",\n    \"homeworld\": \"https://swapi.info/api/planets/1\",\n    \"films\": [\n        \"https://swapi.info/api/films/1\",\n        \"https://swapi.info/api/films/2\",\n        \"https://swapi.info/api/films/3\",\n        \"https://swapi.info/api/films/6\"\n    ],\n    \"species\": [],\n    \"vehicles\": [\n        \"https://swapi.info/api/vehicles/14\",\n        \"https://swapi.info/api/vehicles/30\"\n    ],\n    \"starships\": [\n        \"https://swapi.info/api/starships/12\",\n        \"https://swapi.info/api/starships/22\"\n    ],\n    \"created\": \"2014-12-09T13:50:51.644000Z\",\n    \"edited\": \"2014-12-20T21:17:56.891000Z\",\n    \"url\": \"https://swapi.info/api/people/1\"\n}\n</code></pre> <p>Now, let's create a data class to represent a Star Wars character.</p> <p>Copilot Tip</p> <p>Create a <code>star_wars_character.py</code> file and use Github Copilot Ask/Edit mode to create a data class for the Star Wars Character. You can use the JSON payload above as an example payload within the prompt.</p> <p>Remember that you can directly create files out of Copilot chat by clicking on the three dots icon and then clicking <code>Insert into New File</code>, if you are using the Ask mode:</p> <p></p> <p>Below is a sample implementation for <code>star_wars_character.py</code>.</p> Sample Solution <pre><code>from dataclasses import dataclass\nfrom typing import List\n\n\n@dataclass\nclass StarWarsCharacter:\n    \"\"\"Data class for Star Wars character from SWAPI\"\"\"\n    name: str\n    height: str\n    mass: str\n    hair_color: str\n    skin_color: str\n    eye_color: str\n    birth_year: str\n    gender: str\n    homeworld: str\n    films: List[str]\n    species: List[str]\n    vehicles: List[str]\n    starships: List[str]\n    created: str\n    edited: str\n    url: str\n\n    @classmethod\n    def from_dict(cls, data: dict) -&gt; 'StarWarsCharacter':\n        \"\"\"Create a StarWarsCharacter from a dictionary\"\"\"\n        return cls(\n            name=data.get('name', ''),\n            height=data.get('height', ''),\n            mass=data.get('mass', ''),\n            hair_color=data.get('hair_color', ''),\n            skin_color=data.get('skin_color', ''),\n            eye_color=data.get('eye_color', ''),\n            birth_year=data.get('birth_year', ''),\n            gender=data.get('gender', ''),\n            homeworld=data.get('homeworld', ''),\n            films=data.get('films', []),\n            species=data.get('species', []),\n            vehicles=data.get('vehicles', []),\n            starships=data.get('starships', []),\n            created=data.get('created', ''),\n            edited=data.get('edited', ''),\n            url=data.get('url', '')\n        )\n</code></pre> <p>Copilot Tip</p> <p>If you are facing an error, you can ask Github Copilot to help you fix the error.</p> <p>On Mac press <code>CMD + .</code> and on Windows press <code>Control + .</code> to open the quick fix menu and use the Github Copilot to fix the error.</p> <p>Quick fix menu should look like this:</p> <p></p>"},{"location":"hands-on/starwars-api-python/#step-4-create-the-api-abstract-base-class-interface","title":"Step 4: Create the API Abstract Base Class (Interface)","text":"<p>We will create an abstract base class (interface in Java) that will be used to query the Star Wars API. The abstract base class will have a method that will return a <code>StarWarsCharacter</code> object.</p> <p>Copilot Tip</p> <p>Create a new file called <code>star_wars_api.py</code> file and use Github Copilot chat to create a Python abstract base class for the Star Wars API. We need to have a method that returns Luke Skywalker as a <code>StarWarsCharacter</code> object.</p> Sample Prompt for Copilot <p><code>Can you help me create a plain python abstract base class that queries the Star Wars API and returns a StarWarsCharacter object? I would like to start with just one method for querying Luke Skywalker. The abstract base class should be called StarWarsAPI.</code></p> <p>Here's a sample implementation for <code>star_wars_api.py</code>:</p> Sample Solution <pre><code>from abc import ABC, abstractmethod\nfrom star_wars_character import StarWarsCharacter\n\n\nclass StarWarsAPI(ABC):\n    \"\"\"Abstract Base Class for Star Wars API client\"\"\"\n\n    @abstractmethod\n    def get_luke_skywalker(self) -&gt; StarWarsCharacter:\n        \"\"\"\n        Get Luke Skywalker's information\n        Returns:\n            StarWarsCharacter: Luke Skywalker's data\n        Raises:\n            Exception: If an error occurs while fetching the data\n        \"\"\"\n        pass\n</code></pre>"},{"location":"hands-on/starwars-api-python/#step-5-create-a-test-for-the-starwarsapi-abstract-base-class","title":"Step 5: Create a Test for the StarWarsAPI Abstract Base Class","text":"<p>We will now create a test for the <code>StarWarsAPI</code> abstract base class. The test will be used to verify that the abstract base class is working as expected. We will use pytest to create the test.</p> <p>Copilot Tip</p> <p>Open the <code>test_star_wars_api.py</code> file in the tests folder and use Github Copilot to create a test for the <code>StarWarsAPI</code> abstract base class. Use the <code>/tests</code> command to let Copilot generate the test for you.</p> <p>Here's a sample implementation for <code>test_star_wars_api.py</code>:</p> Sample Solution <pre><code>import pytest\nfrom src.starwarsapi.star_wars_api_impl import StarWarsAPIImpl\nfrom src.starwarsapi.star_wars_character import StarWarsCharacter\n\n\ndef test_get_luke_skywalker():\n    \"\"\"Test that get_luke_skywalker returns Luke Skywalker's data\"\"\"\n    star_wars_api = StarWarsAPIImpl()\n    luke_skywalker = star_wars_api.get_luke_skywalker()\n\n    assert luke_skywalker is not None\n    assert luke_skywalker.name == \"Luke Skywalker\"\n    assert luke_skywalker.height == \"172\"\n    assert luke_skywalker.gender == \"male\"\n</code></pre> <p>If you run tests now, you will run into errors. You will see that the <code>StarWarsAPIImpl</code> class is not yet created. We will implement it in the next step.</p>"},{"location":"hands-on/starwars-api-python/#step-6-implement-the-api-abstract-base-class","title":"Step 6: Implement the API abstract base class","text":"<p>Now, let's implement the abstract base class using Python's requests library.</p> <p>We will first create the <code>StarWarsAPIImpl</code> class that implements the <code>StarWarsAPI</code> abstract base class. The class will have a method that will return a <code>StarWarsCharacter</code> object. As we need to have a start, we will use the Luke Skywalker example and also use a method to query specificly for Luke Skywalker.</p> <p>Copilot Tip</p> <p>Create a new file <code>star_wars_api_impl.py</code> file and use Github Copilot to implement the <code>StarWarsAPI</code> abstract base class. The implementation should use the requests library to fetch data from the Star Wars API.</p> <p>Here's a sample implementation for <code>star_wars_api_impl.py</code>:</p> Sample solution <pre><code>from star_wars_api import StarWarsAPI\nfrom star_wars_character import StarWarsCharacter\n\n\nclass StarWarsAPIImpl(StarWarsAPI):\n    \"\"\"Implementation of the Star Wars API client\"\"\"\n\n    def __init__(self):\n        self.base_url = \"https://swapi.info/api\"\n\n    def get_luke_skywalker(self) -&gt; StarWarsCharacter:\n    \"\"\"\n    Get Luke Skywalker's information\n    \"\"\"\n</code></pre> <p>We will now implement the <code>get_luke_skywalker</code> method in the <code>StarWarsAPIImpl</code> class. We will use <code>requests</code> library to query the Star Wars API and retrieve the information about Luke Skywalker from the URL: https://swapi.info/api/people/1</p> <p>The method should be able to fulfill the following points:</p> <ul> <li>Import the <code>requests</code> library</li> <li>Build the URL for Luke Skywalker (<code>https://swapi.info/api/people/1/</code>)</li> <li>Make a GET request to the API</li> <li>Parse the response JSON into a <code>StarWarsCharacter</code> object</li> <li>Return the <code>StarWarsCharacter</code> object</li> </ul> <p>Sample Prompts</p> <p>You can use the following prompts one by one to implement the method. Accept the suggestions by pressing <code>Tab</code>:</p> <ul> <li><code># Import the requests library</code></li> <li><code># Build the URL for Luke Skywalker</code></li> <li><code># Make a GET request to the Star Wars API</code></li> <li><code># Parse the response JSON into a StarWarsCharacter object</code></li> <li><code># Return the StarWarsCharacter object</code></li> </ul> Sample Solution <pre><code>import requests\nfrom star_wars_api import StarWarsAPI\nfrom star_wars_character import StarWarsCharacter\n\n\nclass StarWarsAPIImpl(StarWarsAPI):\n    \"\"\"Implementation of the Star Wars API client\"\"\"\n\n    def __init__(self):\n        self.base_url = \"https://swapi.info/api\"\n\n    def get_luke_skywalker(self) -&gt; StarWarsCharacter:\n        \"\"\"\n        Get Luke Skywalker's information\n        Returns:\n            StarWarsCharacter: Luke Skywalker's data\n        Raises:\n            Exception: If an error occurs while fetching the data\n        \"\"\"\n        # Build the URL for Luke Skywalker\n        url = f\"{self.base_url}/people/1/\"\n\n        # Make a GET request to the Star Wars API\n        response = requests.get(url, allow_redirects=True)\n\n        # Raise an exception for HTTP errors\n        response.raise_for_status()  \n\n        # Parse the response JSON into a StarWarsCharacter object\n        return StarWarsCharacter.from_dict(response.json())\n</code></pre> <p>Now let's run the test to see if it works:</p> <pre><code>python -m pytest tests/\n</code></pre> <p>If you encounter any issues, you might need to fix the URL. The SWAPI URL sometimes changes, so make sure you're using the correct one. It could be <code>https://swapi.dev/api</code> or <code>https://swapi.info/api</code>.</p>"},{"location":"hands-on/starwars-api-python/#optional-add-a-method-for-darth-vader","title":"Optional: Add a Method for Darth Vader","text":"<p>We will now implement the <code>getDarthVader</code> method in the <code>StarWarsAPIImpl</code> class. We will use <code>requests</code> to query the Star Wars API and retrieve the information about Darth Vader from the url: https://swapi.info/api/people/4</p> <p>Copilot Tip</p> <p>Add a new method to the <code>StarWarsAPI</code> abstract base class and implement it in the <code>StarWarsAPIImpl</code> class.</p> <p>Either use a comment or the Copilot Edit/Agent mode with a prompt: <code>Add a method to get information about Darth Vader</code>.</p> <p>First, add the method to the abstract base class in <code>star_wars_api.py</code>:</p> Sample Solution <pre><code>from abc import ABC, abstractmethod\nfrom star_wars_character import StarWarsCharacter\n\n\nclass StarWarsAPI(ABC):\n    \"\"\"abstract base class for Star Wars API client\"\"\"\n\n    @abstractmethod\n    def get_luke_skywalker(self) -&gt; StarWarsCharacter:\n        \"\"\"\n        Get Luke Skywalker's information\n        Returns:\n            StarWarsCharacter: Luke Skywalker's data\n        Raises:\n            Exception: If an error occurs while fetching the data\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def get_darth_vader(self) -&gt; StarWarsCharacter:\n        \"\"\"\n        Get Darth Vader's information\n        Returns:\n            StarWarsCharacter: Darth Vader's data\n        Raises:\n            Exception: If an error occurs while fetching the data\n        \"\"\"\n        pass\n</code></pre> <p>Then, implement the <code>get_darth_vader</code> method in <code>star_wars_api_impl.py</code>:</p> Sample Solution <pre><code>import requests\nfrom star_wars_api import StarWarsAPI\nfrom star_wars_character import StarWarsCharacter\n\n\nclass StarWarsAPIImpl(StarWarsAPI):\n    \"\"\"Implementation of the Star Wars API client\"\"\"\n\n    def __init__(self):\n        self.base_url = \"https://swapi.info/api\"\n\n    def get_luke_skywalker(self) -&gt; StarWarsCharacter:\n        \"\"\"\n        Get Luke Skywalker's information\n        Returns:\n            StarWarsCharacter: Luke Skywalker's data\n        Raises:\n            Exception: If an error occurs while fetching the data\n        \"\"\"\n        url = f\"{self.base_url}/people/1/\"\n        response = requests.get(url, allow_redirects=True)\n        response.raise_for_status()  # Raise an exception for HTTP errors\n\n        return StarWarsCharacter.from_dict(response.json())\n\n    def get_darth_vader(self) -&gt; StarWarsCharacter:\n        \"\"\"\n        Get Darth Vader's information\n        Returns:\n            StarWarsCharacter: Darth Vader's data\n        Raises:\n            Exception: If an error occurs while fetching the data\n        \"\"\"\n        url = f\"{self.base_url}/people/4/\"\n        response = requests.get(url, allow_redirects=True)\n        response.raise_for_status()  # Raise an exception for HTTP errors\n\n        return StarWarsCharacter.from_dict(response.json())\n</code></pre> <p>Since we have duplicate code now, let's refactor the code.</p> <p>Copilot Tip</p> <p>Add a method <code>_get_star_wars_character(self, character_id)</code> and let Copilot help you refactor.</p> Sample Solution After Refactoring <pre><code>import requests\nfrom star_wars_api import StarWarsAPI\nfrom star_wars_character import StarWarsCharacter\n\n\nclass StarWarsAPIImpl(StarWarsAPI):\n    \"\"\"Implementation of the Star Wars API client\"\"\"\n\n    def __init__(self):\n        self.base_url = \"https://swapi.info/api\"\n\n    def get_luke_skywalker(self) -&gt; StarWarsCharacter:\n        \"\"\"\n        Get Luke Skywalker's information\n        Returns:\n            StarWarsCharacter: Luke Skywalker's data\n        Raises:\n            Exception: If an error occurs while fetching the data\n        \"\"\"\n        return self._get_star_wars_character(1)\n\n    def get_darth_vader(self) -&gt; StarWarsCharacter:\n        \"\"\"\n        Get Darth Vader's information\n        Returns:\n            StarWarsCharacter: Darth Vader's data\n        Raises:\n            Exception: If an error occurs while fetching the data\n        \"\"\"\n        return self._get_star_wars_character(4)\n\n    def _get_star_wars_character(self, character_id: int) -&gt; StarWarsCharacter:\n        \"\"\"\n        Get a Star Wars character by ID\n        Args:\n            character_id: The ID of the character to fetch\n        Returns:\n            StarWarsCharacter: The character data\n        Raises:\n            Exception: If an error occurs while fetching the data\n        \"\"\"\n        url = f\"{self.base_url}/people/{character_id}/\"\n        response = requests.get(url, allow_redirects=True)\n        response.raise_for_status()  # Raise an exception for HTTP errors\n\n        return StarWarsCharacter.from_dict(response.json())\n</code></pre>"},{"location":"hands-on/starwars-api-python/#optional-add-a-test-for-the-darth-vader-method","title":"Optional: Add a Test for the Darth Vader Method","text":"<p>Now let's add a test for the <code>get_darth_vader</code> method:</p> <p>Copilot Tip</p> <p>Add a new test method to the <code>test_star_wars_api.py</code> file that will test the <code>get_darth_vader</code> method. You can use a comment as a prompt to do so: <code># Test the get_darth_vader method</code></p> <p>Here's a sample test method to add to <code>test_star_wars_api.py</code>:</p> Sample Solution <pre><code>def test_get_darth_vader():\n    \"\"\"Test that get_darth_vader returns Darth Vader's data\"\"\"\n    star_wars_api = StarWarsAPIImpl()\n    darth_vader = star_wars_api.get_darth_vader()\n\n    assert darth_vader is not None\n    assert darth_vader.name == \"Darth Vader\"\n    assert darth_vader.height == \"202\"\n    assert darth_vader.gender == \"male\"\n</code></pre> <p>Run the test again to make sure it passes:</p> <pre><code>python -m pytest tests/\n</code></pre>"},{"location":"hands-on/starwars-api-python/#step-9-create-a-simple-app-module","title":"Step 9: Create a Simple App Module","text":"<p>Let's create a simple application module to demonstrate the API client:</p> <p>Copilot Tip</p> <p>Open the <code>app.py</code> file and use Github Copilot to create a simple application that demonstrates the Star Wars API client.</p> <p>Here's a sample implementation for <code>app.py</code>:</p> Sample Solution <pre><code>from star_wars_api_impl import StarWarsAPIImpl\n\n\ndef main():\n    \"\"\"Main function to demonstrate the Star Wars API client\"\"\"\n    print(\"Star Wars API Client\")\n    print(\"--------------------\")\n\n    api = StarWarsAPIImpl()\n\n    # Get Luke Skywalker\n    luke = api.get_luke_skywalker()\n    print(f\"\\nName: {luke.name}\")\n    print(f\"Height: {luke.height} cm\")\n    print(f\"Mass: {luke.mass} kg\")\n    print(f\"Hair color: {luke.hair_color}\")\n    print(f\"Appears in {len(luke.films)} films\")\n\n    # Get Darth Vader\n    vader = api.get_darth_vader()\n    print(f\"\\nName: {vader.name}\")\n    print(f\"Height: {vader.height} cm\")\n    print(f\"Mass: {vader.mass} kg\")\n    print(f\"Hair color: {vader.hair_color}\")\n    print(f\"Appears in {len(vader.films)} films\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Run the application:</p> <pre><code>python app.py\n</code></pre> <p>You should see output similar to this:</p> <pre><code>Star Wars API Client\n--------------------\n\nName: Luke Skywalker\nHeight: 172 cm\nMass: 77 kg\nHair color: blond\nAppears in 4 films\n\nName: Darth Vader\nHeight: 202 cm\nMass: 136 kg\nHair color: none\nAppears in 4 films\n</code></pre>"},{"location":"hands-on/starwars-api-python/#bonus-challenges","title":"Bonus Challenges \ud83c\udf1f","text":"<p>If you have extra time, try these bonus challenges with GitHub Copilot:</p> <ol> <li>Add a method to get information about a character by name (hint: you'll need to use the search endpoint)</li> <li>Add a method to get information about a planet</li> <li>Add a method to get all characters from a specific film</li> <li>Implement caching to avoid making the same API calls repeatedly</li> </ol>"},{"location":"hands-on/starwars-api-python/#summary","title":"Summary \ud83d\udcdd","text":"<p>In this lab, you've learned how to:</p> <ul> <li>Use GitHub Copilot to create a Python client for a REST API</li> <li>Create data classes, abstract base classes, and implementations in Python</li> <li>Write unit tests to verify functionality</li> <li>Use Python's requests library to make API calls</li> </ul> <p>GitHub Copilot has helped you write code faster and with less effort, allowing you to focus on the design and architecture rather than the implementation details. This is a great example of how AI-assisted coding can enhance your development workflow, especially when working with external APIs! \ud83d\ude80</p>"},{"location":"hands-on/starwars-api/","title":"Star Wars API Client Lab \ud83d\ude80","text":"<p>In this hands-on lab, you'll build a Java client for the Star Wars API (SWAPI) with the help of GitHub Copilot! This lab demonstrates how GitHub Copilot can assist with creating DTOs, interfaces, implementations, and tests.</p>"},{"location":"hands-on/starwars-api/#lab-overview","title":"Lab Overview \ud83d\udccb","text":"<p>Duration: 1 hour Difficulty: Intermediate Prerequisites:</p> <ul> <li>Basic knowledge of Java, REST APIs, and unit testing  </li> <li>OpenJDK: OpenJDK JDK 21.0.2 GA Release (java.net)</li> <li>Maven: Maven \u2013 Installing Apache Maven</li> </ul>"},{"location":"hands-on/starwars-api/#what-youll-build","title":"What You'll Build \ud83c\udfd7\ufe0f","text":"<p>A Java client for the Star Wars API with the following components:</p> <ul> <li>Data Transfer Objects (DTOs) to represent Star Wars characters</li> <li>An interface defining the API client methods</li> <li>An implementation of the interface using Java's HTTP client</li> <li>Unit tests to verify the functionality</li> </ul>"},{"location":"hands-on/starwars-api/#getting-started","title":"Getting Started \ud83d\ude80","text":""},{"location":"hands-on/starwars-api/#step-1-set-up-the-project-structure","title":"Step 1: Set Up the Project Structure","text":"<p>We'll start by setting up a basic Maven project structure. GitHub Copilot will help us create the necessary files and configurations.</p> <p>Copilot Tip</p> <p>If you're using an IDE like IntelliJ or VS Code, you can create a new Maven project using the built-in tools. Otherwise, you can use the Maven command-line tools to create a new project.</p> <p>You can also ask Github Copilot Chat to provide you with the steps to create a Maven based Java project, with a prompt like <code>How can I create via terminal a Java based project that already has some unit tests?</code></p> <p>Remember hat you can directly copy commands from the chat and paste them into the terminal using the terminal icon:</p> <p></p> <p>If you want to use Maven command-line tools to create a new project, create an empty folder and navigate to it via terminal. Then run the following command:</p> <pre><code>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre> <p>Ask Github Copilot to provide you with the command to compile the tests, by using the following sample prompt: <code>How can I use maven to run the tests?</code></p> <p>Your project should have the following structure: <pre><code>starwarsapi/\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u2514\u2500\u2500 java/\n\u2502   \u2502       \u2514\u2500\u2500 com/\n\u2502   \u2502           \u2514\u2500\u2500 mycompany/\n\u2502   \u2502               \u2514\u2500\u2500 app/\n\u2502   \u2502                   \u251c\u2500\u2500 App.java\n\u2502   \u2502                   \u251c\u2500\u2500 StarWarsAPI.java\n\u2502   \u2502                   \u251c\u2500\u2500 StarWarsAPIImpl.java\n\u2502   \u2502                   \u2514\u2500\u2500 StarWarsCharacterDTO.java\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/\n\u2502               \u2514\u2500\u2500 mycompany/\n\u2502                   \u2514\u2500\u2500 app/\n\u2502                       \u251c\u2500\u2500 AppTest.java\n\u2502                       \u2514\u2500\u2500 StarWarsAPITest.java\n</code></pre></p> <p>Navigate in the folder where the project was created and run the following command:</p> <pre><code>mvn test\n</code></pre> <p>You should see the following output:</p> <pre><code>[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  1.682 s\n</code></pre>"},{"location":"hands-on/starwars-api/#step-2-create-the-maven-pom-file","title":"Step 2: Create the Maven POM File","text":"<p>Let's start by creating a <code>pom.xml</code> file with the necessary dependencies.</p> <p>Copilot Tip</p> <p>Ask GitHub Copilot to help you create a Maven POM file with dependencies for HTTP client and JSON parsing. Ask Github Copilot how you can leverage Junit 4 instead of Junit 3.</p> <p>Your <code>pom.xml</code> should look something like below.</p> Sample <code>pom.xml</code> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n&lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n&lt;artifactId&gt;starwarsapi&lt;/artifactId&gt;\n&lt;packaging&gt;jar&lt;/packaging&gt;\n&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;name&gt;starwarsapi&lt;/name&gt;\n&lt;url&gt;http://maven.apache.org&lt;/url&gt;\n&lt;properties&gt;\n    &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;\n    &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n&lt;/properties&gt;\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n    &lt;groupId&gt;junit&lt;/groupId&gt;\n    &lt;artifactId&gt;junit&lt;/artifactId&gt;\n    &lt;version&gt;4.13.2&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n    &lt;version&gt;2.13.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"hands-on/starwars-api/#refactor-the-tests-to-use-junit-4","title":"Refactor the Tests to Use JUnit 4","text":"<p>Ask Github Copilot to provide you with the necessary imports to use Junit 4 in your tests. Open your <code>AppTest.java</code> file in an editor and use Copilot Chat with an appropriate prompt to refactor the class.</p> <p>Copilot Tip</p> <p>Use the following prompt: <code>I would like to refactor the tests to use Junit 4 and one basic test. The test should leverage the @Test annotation. Can you help me with the imports and the overall class structure?</code></p> <p>Your <code>AppTest.java</code> file should look like the following sample solution. Be careful with the package name, it should match the one you used when creating the project.</p> Sample Solution <pre><code>package com.mycompany.app;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n/**\n* Unit test for simple App.\n*/\npublic class AppTest \n{\n\n    @Test\n    public void testApp()\n    {\n        assertTrue( true );\n    }\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#step-3-create-the-data-transfer-object-dto","title":"Step 3: Create the Data Transfer Object (DTO)","text":"<p>Please navigate in your browser to the Star Wars API and get familiar with the API. We will create a DTO class to represent a Star Wars Person.</p> <p>Let's start by using Luke Skywalker as an example: https://swapi.info/people/1</p> <p>You can see the example payload directly at the page. </p> Please copy the JSON in your clipboard: <pre><code>{  \n    \"name\": \"Luke Skywalker\",\n    \"height\": \"172\",\n    \"mass\": \"77\",\n    \"hair_color\": \"blond\",\n    \"skin_color\": \"fair\",\n    \"eye_color\": \"blue\",\n    \"birth_year\": \"19BBY\",\n    \"gender\": \"male\",\n    \"homeworld\": \"https://swapi.info/api/planets/1\",\n    \"films\": [\n        \"https://swapi.info/api/films/1\",\n        \"https://swapi.info/api/films/2\",\n        \"https://swapi.info/api/films/3\",\n        \"https://swapi.info/api/films/6\"\n    ],\n    \"species\": [],\n    \"vehicles\": [\n        \"https://swapi.info/api/vehicles/14\",\n        \"https://swapi.info/api/vehicles/30\"\n    ],\n    \"starships\": [\n        \"https://swapi.info/api/starships/12\",\n        \"https://swapi.info/api/starships/22\"\n    ],\n    \"created\": \"2014-12-09T13:50:51.644000Z\",\n    \"edited\": \"2014-12-20T21:17:56.891000Z\",\n    \"url\": \"https://swapi.info/api/people/1\"\n}\n</code></pre> <p>Now, let's create a DTO to represent a Star Wars character.</p> <p>Copilot Tip</p> <p>Create a new file called <code>StarWarsCharacterDTO.java</code> and use Github Copilot chat to create a DTO class for the Star Wars Person. You can use the JSON payload above as an example payload within the prompt.</p> <p>Remember that you can directly create files out of Copilot chat by clicking on the three dots icon and then clicking <code>Insert into New File</code>, if you are using the Ask mode:</p> <p></p> Sample solution <pre><code>package com.mycompany.app;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n/**\n* Data Transfer Object for Star Wars character from SWAPI\n*/\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class StarWarsCharacterDTO {\n    private String name;\n    private String height;\n    private String mass;\n    @JsonProperty(\"hair_color\")\n    private String hair_color;\n    @JsonProperty(\"skin_color\")\n    private String skinColor;\n    @JsonProperty(\"eye_color\")\n    private String eye_color;\n    @JsonProperty(\"birth_year\")\n    private String birthYear;\n    private String gender;\n    private String homeworld;\n    private String[] films;\n    private String[] species;\n    private String[] vehicles;\n    private String[] starships;\n    private String created;\n    private String edited;\n    private String url;\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getHeight() {\n        return height;\n    }\n\n    public void setHeight(String height) {\n        this.height = height;\n    }\n\n    public String getMass() {\n        return mass;\n    }\n\n    public void setMass(String mass) {\n        this.mass = mass;\n    }\n\n    public String getHair_color() {\n        return hair_color;\n    }\n\n    public void setHair_color(String hair_color) {\n        this.hair_color = hair_color;\n    }\n\n    public String getSkinColor() {\n        return skinColor;\n    }\n\n    public void setSkinColor(String skinColor) {\n        this.skinColor = skinColor;\n    }\n\n    public String getEye_color() {\n        return eye_color;\n    }\n\n    public void setEye_color(String eye_color) {\n        this.eye_color = eye_color;\n    }\n\n    public String getBirthYear() {\n        return birthYear;\n    }\n\n    public void setBirthYear(String birthYear) {\n        this.birthYear = birthYear;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n\n    public String getHomeworld() {\n        return homeworld;\n    }\n\n    public void setHomeworld(String homeworld) {\n        this.homeworld = homeworld;\n    }\n\n    public String[] getFilms() {\n        return films;\n    }\n\n    public void setFilms(String[] films) {\n        this.films = films;\n    }\n\n    public String[] getSpecies() {\n        return species;\n    }\n\n    public void setSpecies(String[] species) {\n        this.species = species;\n    }\n\n    public String[] getVehicles() {\n        return vehicles;\n    }\n\n    public void setVehicles(String[] vehicles) {\n        this.vehicles = vehicles;\n    }\n\n    public String[] getStarships() {\n        return starships;\n    }\n\n    public void setStarships(String[] starships) {\n        this.starships = starships;\n    }\n\n    public String getCreated() {\n        return created;\n    }\n\n    public void setCreated(String created) {\n        this.created = created;\n    }\n\n    public String getEdited() {\n        return edited;\n    }\n\n    public void setEdited(String edited) {\n        this.edited = edited;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n}\n</code></pre> <p>Remember that this file needs to be stored in the same folder like your <code>App.java</code> file. The file needs to have the same filename as the class name (eg <code>StarWarsCharacterDTO.java</code> in this example).</p> <p>Copilot Tip</p> <p>If you are facing an error in the <code>StarWarsCharacterDTO</code> class. you can ask Github Copilot to help you fix the error.</p> <p>On Mac press <code>CMD + .</code> and on Windows press <code>Control + .</code> to open the quick fix menu and use the Github Copilot to fix the error.</p> <p>Quick fix menu should look like this:</p> <p></p>"},{"location":"hands-on/starwars-api/#step-4-create-the-api-interface","title":"Step 4: Create the API Interface","text":"<p>We will create an interface that will be used to query the Star Wars API. The interface will have a method that will return a <code>StarWarsCharacterDTO</code> object. As we need to have a start we will use the Luke Skywalker example and also use a method to query specificly for Luke Skywalker.</p> <p>Copilot Tip</p> <p>Create a new file called <code>StarWarsAPI.java</code> in the same folder as your <code>App.java</code> file. If you have problems creating this file then use the Github Copilot chat to help you create the file. We need to have a method that returns Luke Skywalker as an <code>StarWarsCharacterDTO</code> object.</p> Sample Prompt <p><code>Can you help me create a plain java interface that queries the Star Wars API and returns a StarWarsCharacterDTO object? I would like to start with just one method for querying Luke Skywalker. The interface should be called StarWarsAPI.</code></p> <p>Don't forget the add the relevant context to the GitHub Copilot.</p> <p>Your <code>StarWarsAPI.java</code> file should look like the sample below and been stored in the same folder like your <code>App.java</code> and <code>StarWarsCharacterDTO.java</code> file:</p> Sample Solution <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\n\n/**\n* Interface for Star Wars API client\n*/\npublic interface StarWarsAPI {\n    /**\n    * Get Luke Skywalker's information\n    * @return StarWarsCharacterDTO with Luke Skywalker's data\n    * @throws IOException if an I/O error occurs\n    */\n    StarWarsCharacterDTO getLukeSkywalker() throws IOException;\n\n    /**\n    * Get Darth Vader's information\n    * @return StarWarsCharacterDTO with Darth Vader's data\n    * @throws IOException if an I/O error occurs\n    */\n    StarWarsCharacterDTO getDarthVader() throws IOException;\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#step-5-generate-a-test-for-the-starwarsapi-interface","title":"Step 5: Generate a Test for the StarWarsAPI Interface","text":"<p>We will now create a test for the <code>StarWarsAPI</code> interface. The test will be used to verify that the interface is working as expected. We will use Junit 4 to create the test.</p> <p>Use the Github Copilot Chat to create a test for the <code>StarWarsAPI</code> interface. The test should verify that the <code>getLukeSkywalker</code> method is working as expected. The test should be stored in the same folder like your <code>AppTest.java</code> file.</p> <p>Copilot Tip</p> <p>Use the Github Copilot popup to create the test. Leverage the <code>/tests</code> command to let Copilot generate the test for you. An example prompt could be: <code>/tests Create a test that is checking if the retrieved object from the Star Wars API is fine.</code> Accept the suggestion of Copilot and store the file next to your <code>AppTest.java</code> file as <code>StarWarsAPITest.java</code> file.</p> <p>Careful: Most likely you will have to adjust the package name in the generated test file and import the IOException. You can use the quick fix menu to do so with Github Copilot.</p> Sample <code>StarWarsAPITest.java</code> file <pre><code>package com.mycompany.app;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\npublic class StarWarsAPITest {\n\n    @Test\n    public void testGetLukeSkywalker() {\n        StarWarsAPI starWarsAPI = new StarWarsAPIImpl();\n        try {\n            StarWarsCharacterDTO lukeSkywalker = starWarsAPI.getLukeSkywalker();\n            assertNotNull(lukeSkywalker);\n        } catch (IOException e) {\n            fail(\"IOException occurred: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>You will see that the <code>StarWarsAPIImpl</code> class is not yet created. And that we still have compilation errors. We will fix this in the next steps.</p>"},{"location":"hands-on/starwars-api/#step-6-implement-the-api-interface","title":"Step 6: Implement the API Interface","text":"<p>Now, let's implement the interface using Java's HTTP client.</p> <p>We will first create the <code>StarWarsAPIImpl</code> class that implements the <code>StarWarsAPI</code> interface. The class will have a method that will return a <code>StarWarsCharacterDTO</code> object. As we need to have a start, we will use the Luke Skywalker example and also use a method to query specificly for Luke Skywalker.</p> <p>Copilot Tip</p> <p>Create a new file called <code>StarWarsAPIImpl.java</code> in the same folder as your <code>App.java</code> file. You can use VSCode to create this.</p> <p>The File <code>StarWarsAPIImpl.java</code> will look like this:</p> <p><pre><code>public class StarWarsAPIImpl  {\n}\n</code></pre> Use the auto completion feature of VSCode to implement the interface. Move the cursor behind the class name and press space. You should see <code>implements StarWarsAPI</code>. Press tab to accept the suggestion.</p> <p>The file should now look like this:</p> <pre><code>public class StarWarsAPIImpl implements StarWarsAPI {\n}\n</code></pre> <p>Now we will implement the method. Just move the cursor on the class name and use the quick fix menu to implement the method:</p> <p></p> <p>Your <code>StarWarsAPIImpl.java</code> file should look like the sample below:</p> Sample Solution <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\n\npublic class StarWarsAPIImpl implements StarWarsAPI{\n\n    @Override\n    public StarWarsCharacterDTO getLukeSkywalker() throws IOException {\n        // TODO Auto-generated method stub\n        throw new UnsupportedOperationException(\"Unimplemented method 'getLukeSkywalker'\");\n    }  \n\n}\n</code></pre> <p>Your error in the <code>StarWarsAPITest.java</code> file should be gone now. Run the tests again to make sure everything is working as expected. The tests should fail.</p>"},{"location":"hands-on/starwars-api/#implement-the-getlukeskywalker-method-with-http-client","title":"Implement the <code>getLukeSkywalker</code> Method with HTTP Client","text":"<p>We will now implement the <code>getLukeSkywalker</code> method in the <code>StarWarsAPIImpl</code> class. We will use the Java <code>HttpClient</code> to query the Star Wars API and retrieve the information about Luke Skywalker from the url: https://swapi.info/api/people/1</p> <p>Copilot Tip</p> <p>Click in the body of the <code>getLukeSkywalker</code> method and use iterative prompting to implement the method.</p> <p>The method should be able fulfill the following points:</p> <ul> <li>instantiate a <code>HttpClient</code> object</li> <li>create a <code>HttpRequest</code> object using the <code>GET</code> method and the url <code>https://swapi.info/api/people/1</code></li> <li>send the request and retrieve the response</li> <li>parse the response body to a <code>StarWarsCharacterDTO</code> object</li> <li>return the <code>StarWarsCharacterDTO</code> object</li> </ul> Sample Prompt <p>You can use the following prompts one by one to implement the method. Accept the suggestions by pressing <code>Tab</code>:</p> <ul> <li><code>// Use Java HttpClient to make a GET request to the Star Wars API // The URL to get Luke Skywalker is https://swapi.info/api/people/1 // Create a new instance of HttpClient</code></li> <li><code>// Create a new instance of HttpRequest</code></li> <li><code>// Send the request and retrieve the response</code></li> <li><code>// Parse the response body to a StarWarsCharacterDTO object</code></li> <li><code>// Return the StarWarsCharacterDTO object</code></li> </ul> Sample Solution <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient; // Import the HttpClient class\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\npublic class StarWarsAPIImpl implements StarWarsAPI{\n\n    @Override\n    public StarWarsCharacterDTO getLukeSkywalker() throws IOException {\n\n        // Use Java HttpClient to make a GET request to the Star Wars API\n        // The URL to get Luke Skywalker is https://swapi.info/api/people/1\n        // Create a new instance of HttpClient\n        HttpClient client = HttpClient.newHttpClient();\n\n        // Create a new instance of HttpRequest\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://swapi.info/api/people/1\"))\n            .build();\n\n        // Send the request and get the response\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        // Parse the response JSON into a StarWarsCharacterDTO object\n        ObjectMapper mapper = new ObjectMapper();\n        StarWarsCharacterDTO lukeSkywalker = mapper.readValue(response.body(), StarWarsCharacterDTO.class);\n\n        return lukeSkywalker;\n    }    \n}\n</code></pre> <p>You will see that there is an error with the <code>ObjectMapper</code> class. We will fix this in the next steps.</p>"},{"location":"hands-on/starwars-api/#fixing-the-objectmapper-error","title":"Fixing the ObjectMapper Error","text":"<p>The <code>ObjectMapper</code> class is not yet imported. But even then we need to add the <code>jackson-databind</code> dependency to the <code>pom.xml</code> file. Use the Github Copilot to help with this.</p> <p>Copilot Tip</p> <ul> <li>Use Github Copilot to generate the import in your <code>StarWarsAPIImpl.java</code> file to <code>import com.fasterxml.jackson.databind.ObjectMapper;</code></li> <li>Use Github Copilot to generate the dependency in your <code>pom.xml</code> file to <code>com.fasterxml.jackson.core:jackson-databind:2.13.0</code></li> </ul> <p>You can use Github Copilot <code>/fix</code> command to fix the error in the <code>StarWarsAPIImpl.java</code> file. You can also use the right click menu to fix the error.</p> <p>You can also ask Github Copilot Chat to provide you with the necessary dependency for the <code>pom.xml</code> file. A prompt could be: <code>I need to add the jackson-databind dependency to the pom.xml file. Can you help me with this?</code></p> <p>A popup from the Java Extension Pack will appear. Accept the suggestion to rebuild the Java Class Path.</p> Sample Solution for <code>StarWarsAPIImpl.java</code> file <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient; // Import the HttpClient class\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class StarWarsAPIImpl implements StarWarsAPI{\n\n    @Override\n    public StarWarsCharacterDTO getLukeSkywalker() throws IOException {\n\n        // Use Java HttpClient to make a GET request to the Star Wars API\n        // The URL to get Luke Skywalker is https://swapi.info/api/people/1\n\n        // Create a new instance of HttpClient\n        HttpClient client = HttpClient.newHttpClient();\n\n        // Create a new instance of HttpRequest\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://swapi.info/api/people/1\"))\n            .build();\n\n        // Send the request and get the response\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        // Parse the response JSON into a StarWarsCharacterDTO object\n        ObjectMapper mapper = new ObjectMapper();\n        StarWarsCharacterDTO lukeSkywalker = mapper.readValue(response.body(), StarWarsCharacterDTO.class);\n\n        return lukeSkywalker;\n    }  \n}\n</code></pre> Sample Solution for <code>pom.xml</code> file <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n&lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n&lt;artifactId&gt;my-app&lt;/artifactId&gt;\n&lt;packaging&gt;jar&lt;/packaging&gt;\n&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;name&gt;my-app&lt;/name&gt;\n&lt;url&gt;http://maven.apache.org&lt;/url&gt;\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n    &lt;groupId&gt;junit&lt;/groupId&gt;\n    &lt;artifactId&gt;junit&lt;/artifactId&gt;\n    &lt;version&gt;4.13.2&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Add this block for jackson-databind --&gt;\n    &lt;dependency&gt;\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n    &lt;version&gt;2.13.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre> <p>Nevertheless there is now a new error in the <code>StarWarsAPIImpl.java</code> file. We will fix this in the next steps.</p>"},{"location":"hands-on/starwars-api/#fixing-the-interruptedexception-error","title":"Fixing the InterruptedException Error","text":"<p>The <code>getLukeSkywalker</code> method throws an <code>IOException</code>. But the <code>HttpClient</code> class also throws an <code>InterruptedException</code>.</p> <p>We will fix this by adding the <code>InterruptedException</code> to the <code>throws</code> clause of the method. This also means that we need to add the <code>InterruptedException</code> to the <code>throws</code> clause of the <code>getLukeSkywalker</code> method in the <code>StarWarsAPI</code> interface. And afterwards to the try/catch block in the <code>StarWarsAPITest.java</code> file.</p> <ul> <li> <p>Use the Quick Fix menu (<code>CMD+.</code> or <code>Control+.</code>) to add the <code>InterruptedException</code> to the <code>throws</code> clause of the <code>getLukeSkywalker</code> method.  </p> </li> <li> <p>Use the Quick Fix menu (<code>CMD+.</code> or <code>Control+.</code>) to add the <code>InterruptedException</code> to the <code>throws</code> clause of the <code>getLukeSkywalker</code> method in the <code>StarWarsAPI</code> interface. </p> </li> <li> <p>Use the Quick Fix menu (<code>CMD+.</code> or <code>Control+.</code>) to add the <code>InterruptedException</code> to the <code>try/catch</code> block in the <code>StarWarsAPITest.java</code> file. </p> </li> </ul> <p>After these steps, your files should look like the samples below:</p> Sample Solution for <code>StarWarsAPIImpl.java</code> File <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient; // Import the HttpClient class\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class StarWarsAPIImpl implements StarWarsAPI{\n\n    @Override\n    public StarWarsCharacterDTO getLukeSkywalker() throws IOException, InterruptedException {\n\n        // Use Java HttpClient to make a GET request to the Star Wars API\n        // The URL to get Luke Skywalker is https://swapi.info/api/people/1\n\n        // Create a new instance of HttpClient\n        HttpClient client = HttpClient.newHttpClient();\n\n        // Create a new instance of HttpRequest\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://swapi.info/api/people/1\"))\n            .build();\n\n        // Send the request and get the response\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        // Parse the response JSON into a StarWarsCharacterDTO object\n        ObjectMapper mapper = new ObjectMapper();\n        StarWarsCharacterDTO lukeSkywalker = mapper.readValue(response.body(), StarWarsCharacterDTO.class);\n\n        return lukeSkywalker;\n    }  \n}\n</code></pre> Sample Solution for <code>StarWarsAPI.java</code> File <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\n\npublic interface StarWarsAPI {\n\n    StarWarsCharacterDTO getLukeSkywalker() throws IOException, InterruptedException;\n\n}\n</code></pre> Sample Solution for <code>StarWarsAPITest.java</code> File <pre><code>package com.mycompany.app;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\npublic class StarWarsAPITest {\n\n    @Test\n    public void testGetLukeSkywalker() {\n\n        StarWarsAPI starWarsAPI = new StarWarsAPIImpl();\n        try {\n            StarWarsCharacterDTO lukeSkywalker = starWarsAPI.getLukeSkywalker();\n            assertNotNull(lukeSkywalker);\n        } catch (IOException | InterruptedException e) {\n            fail(\"IOException occurred: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#run-the-tests","title":"Run the tests","text":"<p>Run the tests again to make sure everything is working as expected. The tests might fail with the following:</p> <pre><code>[ERROR] Failures: \n[ERROR]    StarWarsAPITest.testGetLukeSkywalker:20 IOException occurred: No content to map due to end-of-input\n at [Source: (String)\"\"; line: 1, column: 0]\n</code></pre> <p>Copilot Tip</p> <ul> <li>Ask Github Copilot to provide you with the necessary code to fix the error. The hint might be not enough.</li> <li>Go in your browser. Open the network tab in the developer tools. And visit the url <code>https://swapi.info/api/people/1</code>. Look at the network and use this info to fix the error.</li> </ul> <p>To solve the issue, open the <code>StarWarsAPIImpl.java</code> file. Go in Github Copilot Chat and ask for help to fix the error with the following sample prompt: <code>When visiting the url https://swapi.info/api/people/1 I see in my network tab of the dev consoles in my browser a 308. Does this lead to an error in my test?</code></p> <p>Then, replace the instance of the <code>HttpClient</code> with the following code: <code>HttpClient client = HttpClient.newBuilder().followRedirects(HttpClient.Redirect.ALWAYS).build();</code></p> <p>After that, rerun the tests to make sure everything is working as expected: <code>mvn test</code></p> <p>You can find the sample solution of the <code>StarWarsAPIImpl.java</code> file below.</p> Sample Solution <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient; // Import the HttpClient class\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class StarWarsAPIImpl implements StarWarsAPI{\n\n    @Override\n    public StarWarsCharacterDTO getLukeSkywalker() throws IOException, InterruptedException {\n\n        // Use Java HttpClient to make a GET request to the Star Wars API\n        // The URL to get Luke Skywalker is https://swapi.info/api/people/1\n\n        // Create a new instance of HttpClient\n        HttpClient client = HttpClient.newBuilder()\n            .followRedirects(HttpClient.Redirect.ALWAYS)\n            .build();\n\n        // Create a new instance of HttpRequest\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://swapi.info/api/people/1\"))\n            .build();\n\n        // Send the request and get the response\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        // Parse the response JSON into a StarWarsCharacterDTO object\n        ObjectMapper mapper = new ObjectMapper();\n        StarWarsCharacterDTO lukeSkywalker = mapper.readValue(response.body(), StarWarsCharacterDTO.class);\n\n        return lukeSkywalker;\n    }  \n}\n</code></pre>"},{"location":"hands-on/starwars-api/#adding-more-asserts-to-the-test","title":"Adding more Asserts to the Test","text":"<p>We need to add a little more asserts to the test to check if the information about Luke Skywalker is correct. We will check if the name of Luke Skywalker is correct and if the height is correct.</p> <ul> <li>Open the <code>StarWarsAPITest.java</code> file.</li> <li>Use comments as prompts after the <code>assertNotNull</code> line to ask Github Copilot to provide you with the necessary code to check if the name of Luke Skywalker is correct and if the height is correct.</li> </ul> <p>Copilot Tip</p> <p>Use the following prompts as comments to ask Github Copilot to provide you with the necessary code. Press enter after the comment and Tab to accept the suggestion.</p> <ul> <li><code>// Check if the name of Luke Skywalker is correct</code></li> <li><code>// Check if the name of Luke Skywalker is correct</code></li> </ul> <p>Your <code>StarWarsAPITest.java</code> file should look like the sample below.</p> Sample Solution <pre><code>package com.mycompany.app;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\npublic class StarWarsAPITest {\n\n    @Test\n    public void testGetLukeSkywalker() {\n\n        StarWarsAPI starWarsAPI = new StarWarsAPIImpl();\n        try {\n            StarWarsCharacterDTO lukeSkywalker = starWarsAPI.getLukeSkywalker();\n            assertNotNull(lukeSkywalker);\n\n            // Check if the name of Like Skywalker is correct\n            assertEquals(\"Luke Skywalker\", lukeSkywalker.getName());\n\n            // Check if the height of Luke Skywalker is correct\n            assertEquals(\"172\", lukeSkywalker.getHeight());\n\n        } catch (IOException | InterruptedException e) {\n            fail(\"IOException occurred: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#optional-add-additional-characters-to-the-starwarsapi-interface","title":"Optional:  Add Additional Characters to the StarWarsAPI Interface","text":"<p>Now that we have implemented the <code>getLukeSkywalker</code> method we will add additional methods to the <code>StarWarsAPI</code> interface to query other Star Wars characters. We will now query for our beloved Darth Vader.</p> <p>Add a new method to the <code>StarWarsAPI</code> interface that will return a <code>StarWarsCharacterDTO</code> object for Darth Vader. </p> <p>Copilot Tip</p> <p>You can use the following prompt as a comment to ask Github Copilot to provide you with the necessary code. Press enter after the comment and Tab to accept the suggestion: <code>// Get Darth Vader</code></p> <p>Your <code>StarWarsAPI.java</code> file should look like the sample below.</p> Sample Solution <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\n\npublic interface StarWarsAPI {\n\n    StarWarsCharacterDTO getLukeSkywalker() throws IOException, InterruptedException;\n    // Get Darth Vader\n    StarWarsCharacterDTO getDarthVader() throws IOException, InterruptedException;\n}\n</code></pre> <p>This will lead to a compile error in the <code>StarWarsAPIImpl</code> class. We will fix this in the next steps.</p>"},{"location":"hands-on/starwars-api/#implement-the-getdarthvader-method-in-the-starwarsapiimpl-class","title":"Implement the getDarthVader method in the StarWarsAPIImpl class","text":"<p>We will now implement the <code>getDarthVader</code> method in the <code>StarWarsAPIImpl</code> class. We will use the Java <code>HttpClient</code> to query the Star Wars API and retrieve the information about Darth Vader from the url: https://swapi.info/api/people/4</p> <p>Navigate to the <code>StarWarsAPIImpl.java</code> file. Use a comment as a prompt after the <code>getLukeSkywalker</code> method to ask Github Copilot to provide you with the necessary code to implement the <code>getDarthVader</code> method.</p> <p>Copilot Tip</p> <p>Use the following prompt as a comment to ask Github Copilot to provide you with the necessary code. Press enter after the comment and Tab to accept the suggestion: <code>// Implement the getDarthVader method</code></p> <p>Your <code>StarWarsAPIImpl.java</code> file should look like the sample below.</p> Sample Solution <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient; // Import the HttpClient class\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class StarWarsAPIImpl implements StarWarsAPI{\n\n    @Override\n    public StarWarsCharacterDTO getLukeSkywalker() throws IOException, InterruptedException {\n\n        // Use Java HttpClient to make a GET request to the Star Wars API\n        // The URL to get Luke Skywalker is https://swapi.info/api/people/1\n\n        // Create a new instance of HttpClient\n        HttpClient client = HttpClient.newBuilder()\n            .followRedirects(HttpClient.Redirect.ALWAYS)\n            .build();\n\n        // Create a new instance of HttpRequest\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://swapi.info/api/people/1\"))\n            .build();\n\n        // Send the request and get the response\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        // Parse the response JSON into a StarWarsCharacterDTO object\n        ObjectMapper mapper = new ObjectMapper();\n        StarWarsCharacterDTO lukeSkywalker = mapper.readValue(response.body(), StarWarsCharacterDTO.class);\n\n        return lukeSkywalker;\n\n\n    }\n\n    // Implement the getDarthVader method\n    @Override\n    public StarWarsCharacterDTO getDarthVader() throws IOException, InterruptedException {\n\n        // Use Java HttpClient to make a GET request to the Star Wars API\n        // The URL to get Darth Vader is https://swapi.info/api/people/4\n\n        // Create a new instance of HttpClient\n        HttpClient client = HttpClient.newBuilder()\n            .followRedirects(HttpClient.Redirect.ALWAYS)\n            .build();\n\n        // Create a new instance of HttpRequest\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(\"https://swapi.info/api/people/4\"))\n            .build();\n\n        // Send the request and get the response\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        // Parse the response JSON into a StarWarsCharacterDTO object\n        ObjectMapper mapper = new ObjectMapper();\n        StarWarsCharacterDTO darthVader = mapper.readValue(response.body(), StarWarsCharacterDTO.class);\n\n        return darthVader;      \n\n    }  \n}\n</code></pre> <p>Rerun the tests to see if it is still working. Next we will add a test for the <code>getDarthVader</code> method.</p>"},{"location":"hands-on/starwars-api/#add-a-test-for-the-getdarthvader-method","title":"Add a test for the getDarthVader method","text":"<p>We will now add a test for the <code>getDarthVader</code> method in the <code>StarWarsAPITest</code> class. The test will be used to verify that the <code>getDarthVader</code> method is working as expected.</p> <p>Add a new test method to the <code>StarWarsAPITest</code> class that will test the <code>getDarthVader</code> method. You can use a comment as a prompt to do so.</p> <p>Copilot Tip</p> <p>Open the <code>StarWarsAPITest.java</code> file. Use a comment as a prompt after the <code>testGetLukeSkywalker</code> method to ask Github Copilot to provide you with the necessary code to implement the <code>testGetDarthVader</code> method: <code>// Test the getDarthVader method</code></p> <p>After that, rerun the tests to make sure everything is working as expected: <code>mvn test</code></p> <p>Your <code>StarWarsAPITest.java</code> file should look like the sample below.</p> Sample Solution <pre><code>package com.mycompany.app;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\npublic class StarWarsAPITest {\n\n    @Test\n    public void testGetLukeSkywalker() {\n\n        StarWarsAPI starWarsAPI = new StarWarsAPIImpl();\n        try {\n            StarWarsCharacterDTO lukeSkywalker = starWarsAPI.getLukeSkywalker();\n            assertNotNull(lukeSkywalker);\n\n            // Check if the name of Like Skywalker is correct\n            assertEquals(\"Luke Skywalker\", lukeSkywalker.getName());\n\n            // Check if the height of Luke Skywalker is correct\n            assertEquals(\"172\", lukeSkywalker.getHeight());\n\n        } catch (IOException | InterruptedException e) {\n            fail(\"IOException occurred: \" + e.getMessage());\n        }\n    }\n\n    // Test the getDarthVader method\n    @Test\n    public void testGetDarthVader() {\n\n        StarWarsAPI starWarsAPI = new StarWarsAPIImpl();\n        try {\n            StarWarsCharacterDTO darthVader = starWarsAPI.getDarthVader();\n            assertNotNull(darthVader);\n\n            // Check if the name of Darth Vader is correct\n            assertEquals(\"Darth Vader\", darthVader.getName());\n\n            // Check if the height of Darth Vader is correct\n            assertEquals(\"202\", darthVader.getHeight());\n\n        } catch (IOException | InterruptedException e) {\n            fail(\"IOException occurred: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#step-7-refactor-the-api-implementation","title":"Step 7: Refactor the API Implementation","text":"<p>There's a lot of duplicated code in the <code>getLukeSkywalker</code> and <code>getDarthVader</code> methods. Let's refactor the code to extract the common code into a new private method.</p> <p>Use the Github Copilot chat to help you refactor the <code>getLukeSkywalker</code> and <code>getDarthVader</code> methods in the <code>StarWarsAPIImpl</code> class. The common code should be extracted into a new private method called <code>getStarWarsCharacter</code>. The method should only receive an id as a parameter and return a <code>StarWarsCharacterDTO</code> object.</p> <p>Copilot Tip</p> <ul> <li>Open your <code>StarWarsAPIImpl.java</code> file.</li> <li>Use Github Copilot chat to help you refactor the <code>getLukeSkywalker</code> and <code>getDarthVader</code> methods. Use the following prompt: <code>Can you help me refactoring this class to use a private method getStarWarsCharacter to retrieve the payloads and avoid duplicated code in the different methods. I want to provide an Id to the private method. I need the whole refactored class as a result including the getLukeSkywalker and getDarthVaeder methods.</code></li> <li>Be careful: The retrieved class is missing the package declaration. Add the package declaration to the class</li> </ul> <p>After refactoring, your <code>StarWarsAPIImpl.java</code> file should look like the sample below.</p> Sample Solution <pre><code>package com.mycompany.app;\n\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.io.IOException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n/**\n* Implementation of the Star Wars API client\n*/\npublic class StarWarsAPIImpl implements StarWarsAPI {\n    private HttpClient client;\n\n    public StarWarsAPIImpl() {\n        this.client = HttpClient.newBuilder()\n            .followRedirects(HttpClient.Redirect.ALWAYS)\n            .build();\n    }\n\n    @Override\n    public StarWarsCharacterDTO getLukeSkywalker() throws IOException, InterruptedException {\n        return getStarWarsCharacter(1);\n    }\n\n    @Override\n    public StarWarsCharacterDTO getDarthVader() throws IOException, InterruptedException {\n        return getStarWarsCharacter(4);\n    }\n\n    private StarWarsCharacterDTO getStarWarsCharacter(int id) throws IOException, InterruptedException {\n        String url = \"https://swapi.dev/api/people/\" + id + \"/\";\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(url))\n            .build();\n\n        HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        ObjectMapper mapper = new ObjectMapper();\n        return mapper.readValue(response.body(), StarWarsCharacterDTO.class);\n    }\n}\n</code></pre> <p>Rerun the tests to make sure everything is working as expected. The tests should pass.</p>"},{"location":"hands-on/starwars-api/#step-8-create-a-simple-app-class","title":"Step 8: Create a Simple App Class","text":"<p>Let's create a simple application class to demonstrate the API client.</p> <p>Copilot Tip</p> <p>Create a new file called <code>App.java</code> and add a comment describing what you want to create.</p> Sample <code>App.java</code> <pre><code>package com.mycompany.app;\n\nimport java.io.IOException;\n\n/**\n* Main application class\n*/\npublic class App {\n    public static void main(String[] args) {\n        System.out.println(\"Star Wars API Client\");\n\n        StarWarsAPI api = new StarWarsAPIImpl();\n\n        try {\n            System.out.println(\"Getting Luke Skywalker's information...\");\n            StarWarsCharacterDTO luke = api.getLukeSkywalker();\n            System.out.println(\"Name: \" + luke.getName());\n            System.out.println(\"Height: \" + luke.getHeight() + \" cm\");\n            System.out.println(\"Mass: \" + luke.getMass() + \" kg\");\n            System.out.println(\"Hair color: \" + luke.getHair_color());\n            System.out.println(\"Eye color: \" + luke.getEye_color());\n\n            System.out.println(\"\\nGetting Darth Vader's information...\");\n            StarWarsCharacterDTO vader = api.getDarthVader();\n            System.out.println(\"Name: \" + vader.getName());\n            System.out.println(\"Height: \" + vader.getHeight() + \" cm\");\n            System.out.println(\"Mass: \" + vader.getMass() + \" kg\");\n            System.out.println(\"Hair color: \" + vader.getHair_color());\n            System.out.println(\"Eye color: \" + vader.getEye_color());\n        } catch (IOException | InterruptedException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"hands-on/starwars-api/#step-9-run-the-tests","title":"Step 9: Run the Tests","text":"<p>Run the tests to make sure everything is working as expected.</p> <p>Copilot Tip</p> <p>Use the Maven command <code>mvn test</code> to run the tests.</p> <p>If everything is set up correctly, the tests should pass, indicating that your Star Wars API client is working properly.</p>"},{"location":"hands-on/starwars-api/#bonus-challenges","title":"Bonus Challenges \ud83c\udf1f","text":"<p>If you have extra time, try these bonus challenges with GitHub Copilot:</p> <ol> <li>Add a method to get information about a character by name (hint: you'll need to use the search endpoint)</li> <li>Add a method to get information about a planet</li> <li>Add a method to get all characters from a specific film</li> <li>Implement caching to avoid making the same API calls repeatedly</li> </ol>"},{"location":"hands-on/starwars-api/#summary","title":"Summary \ud83d\udcdd","text":"<p>In this lab, you've learned how to:</p> <ul> <li>Use GitHub Copilot to create a Java client for a REST API</li> <li>Create DTOs, interfaces, and implementations</li> <li>Write unit tests to verify functionality</li> <li>Refactor code to eliminate duplication</li> </ul> <p>GitHub Copilot has helped you write code faster and with less effort, allowing you to focus on the design and architecture rather than the implementation details. This is a great example of how AI-assisted coding can enhance your development workflow, especially when working with external APIs! \ud83d\ude80</p> <p>Contributed by: Jeffrey Groneberg</p>"}]}